[
 {
  "name" : "core.stdc.stdbool",
  "kind" : "module",
  "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\core\\stdc\\stdbool.d",
  "comment" : " D header file for C99.\n\n Source:    $(DRUNTIMESRC core/stdc/stdbool.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
  "members" : [
   {
    "name" : "__bool_true_false_are_defined",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "  bool is already defined in D\n  true is already defined in D\n  false is already defined in D\n",
    "line" : 21,
    "char" : 6,
    "storageClass" : [
     "enum",
     "nothrow",
     "@nogc",
     "@safe"
    ],
    "linkage" : "c",
    "deco" : "i",
    "init" : "1"
   }
  ]
 },
 {
  "name" : "language",
  "kind" : "module",
  "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\language.d",
  "members" : [
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enforce"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "fromStringz",
     "toStringz"
    ]
   },
   {
    "name" : "Language",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "  An opaque object that defines how to parse a particular language. The code for each\n  `Language` is gen by the Tree-sitter CLI.\n",
    "line" : 12,
    "char" : 1,
    "members" : [
     {
      "name" : "libc",
      "kind" : "import",
      "line" : 14,
      "char" : 10,
      "protection" : "private",
      "selective" : [
       "TSLanguage",
       "ts_language_version",
       "ts_language_symbol_count",
       "ts_language_symbol_name",
       "ts_language_symbol_for_name",
       "ts_language_symbol_type",
       "TSSymbolType",
       "ts_language_field_count",
       "ts_language_field_name_for_id",
       "ts_language_field_id_for_name"
      ]
     },
     {
      "name" : "tslanguage",
      "kind" : "variable",
      "protection" : "public",
      "comment" : " internal TSLanguage\n",
      "line" : 20,
      "char" : 21,
      "storageClass" : [
       "const"
      ],
      "linkage" : "c",
      "deco" : "xPS4libc10TSLanguage",
      "originalType" : "TSLanguage*",
      "offset" : 0
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : " create a new Language.\n",
      "line" : 23,
      "char" : 3,
      "linkage" : "c",
      "deco" : "UNbNcNixPS4libc10TSLanguageZS8language8Language",
      "originalType" : "nothrow @nogc ref extern (C) (const TSLanguage* tslanguage)",
      "parameters" : [
       {
        "name" : "tslanguage",
        "deco" : "xPS4libc10TSLanguage"
       }
      ],
      "endline" : 27,
      "endchar" : 3
     },
     {
      "name" : "get_version",
      "kind" : "function",
      "protection" : "public",
      "comment" : "   Get the ABI version number that indicates which version of the Tree-sitter CLI\n   that was used to generate this `Language`.\n",
      "line" : 33,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNiZk",
      "originalType" : "nothrow @nogc extern (C) ()",
      "endline" : 36,
      "endchar" : 3
     },
     {
      "name" : "node_kind_count",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the number of distinct node types in language.\n",
      "line" : 39,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNiZk",
      "originalType" : "nothrow @nogc extern (C) ()",
      "endline" : 42,
      "endchar" : 3
     },
     {
      "name" : "node_kind_for_id",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the name of the node kind for the given numerical id.\n",
      "line" : 45,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNitZAxa",
      "originalType" : "nothrow @nogc extern (C) (ushort id)",
      "parameters" : [
       {
        "name" : "id",
        "deco" : "t"
       }
      ],
      "endline" : 49,
      "endchar" : 3
     },
     {
      "name" : "id_for_node_kind",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the numeric id for the given node kind.\n",
      "line" : 52,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbAyabZt",
      "originalType" : "extern (C) (string kind, bool named)",
      "parameters" : [
       {
        "name" : "kind",
        "deco" : "Aya",
        "storageClass" : [
         "scope"
        ]
       },
       {
        "name" : "named",
        "deco" : "b"
       }
      ],
      "endline" : 57,
      "endchar" : 3
     },
     {
      "name" : "node_kind_is_named",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Check if the node type for the given numerical id is named (as opposed\n    to an anonymous node type).\n",
      "line" : 63,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNitZb",
      "originalType" : "nothrow @nogc extern (C) (ushort id)",
      "parameters" : [
       {
        "name" : "id",
        "deco" : "t"
       }
      ],
      "endline" : 66,
      "endchar" : 3
     },
     {
      "name" : "node_kind_is_visible",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Check if the node type for the given numerical id is anonymous (as opposed\n    to a named node type).\n",
      "line" : 72,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNitZb",
      "originalType" : "nothrow @nogc extern (C) (ushort id)",
      "parameters" : [
       {
        "name" : "id",
        "deco" : "t"
       }
      ],
      "endline" : 75,
      "endchar" : 3
     },
     {
      "name" : "field_count",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the number of distinct field names in this language.\n",
      "line" : 78,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNiZk",
      "originalType" : "nothrow @nogc extern (C) ()",
      "endline" : 81,
      "endchar" : 3
     },
     {
      "name" : "field_name_for_id",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the field names for the given numerical id.\n",
      "line" : 84,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNitZAxa",
      "originalType" : "nothrow @nogc extern (C) (ushort field_id)",
      "parameters" : [
       {
        "name" : "field_id",
        "deco" : "t"
       }
      ],
      "endline" : 88,
      "endchar" : 3
     },
     {
      "name" : "field_id_for_name",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the numerical id for the given field name.\n",
      "line" : 91,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UAyaZt",
      "originalType" : "extern (C) (string field_name)",
      "parameters" : [
       {
        "name" : "field_name",
        "deco" : "Aya",
        "storageClass" : [
         "scope"
        ]
       }
      ],
      "endline" : 98,
      "endchar" : 3
     }
    ]
   }
  ]
 },
 {
  "name" : "libc",
  "kind" : "module",
  "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\libc.d",
  "members" : [
   {
    "name" : "core.stdc.config",
    "kind" : "import",
    "line" : 2,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "ts_set_allocator",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Set the allocation functions used by the library.\n\n By default, Tree-sitter uses the standard libc allocation functions,\n but aborts the process when an allocation fails. This function lets\n you supply alternative allocation functions at runtime.\n\n If you pass `NULL` for any parameter, Tree-sitter will switch back to\n its default implementation of that function.\n\n If you call this function after the library has already been used, then\n you must ensure that either:\n  1. All the existing objects have been freed.\n  2. The new allocator shares its state with the old one, so it is capable\n     of freeing memory that was allocated by the old allocator.\n",
    "line" : 22,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPUmZPvPUmmZQhPUQlmZQpPUQtZvZv",
    "parameters" : [
     {
      "deco" : "PUmZPv"
     },
     {
      "deco" : "PUmmZPv"
     },
     {
      "deco" : "PUPvmZQe"
     },
     {
      "deco" : "PUPvZv"
     }
    ]
   },
   {
    "name" : "ts_language_version",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the ABI version number for this language. This version number is used\n to ensure that languages were generated by a compatible version of\n Tree-sitter.\n\n See also `ts_parser_set_language`.\n",
    "line" : 31,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc10TSLanguageZk",
    "parameters" : [
     {
      "deco" : "PxS4libc10TSLanguage"
     }
    ]
   },
   {
    "name" : "ts_language_symbol_type",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Check whether the given node type id belongs to named nodes, anonymous nodes,\n or a hidden nodes.\n\n See also `ts_node_is_named`. Hidden nodes are never returned from the API.\n",
    "line" : 38,
    "char" : 16,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc10TSLanguagetZEQu12_Anonymous_4",
    "originalType" : "nothrow @nogc extern (C) TSSymbolType(const(TSLanguage)*, ushort)",
    "parameters" : [
     {
      "deco" : "PxS4libc10TSLanguage"
     },
     {
      "deco" : "t"
     }
    ]
   },
   {
    "name" : "ts_language_field_id_for_name",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the numerical id for the given field name string.\n",
    "line" : 42,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc10TSLanguagePxakZt",
    "parameters" : [
     {
      "deco" : "PxS4libc10TSLanguage"
     },
     {
      "deco" : "Pxa"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_language_field_name_for_id",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the field name string for the given numerical id.\n",
    "line" : 46,
    "char" : 16,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc10TSLanguagetZPxa",
    "parameters" : [
     {
      "deco" : "PxS4libc10TSLanguage"
     },
     {
      "deco" : "t"
     }
    ]
   },
   {
    "name" : "ts_language_field_count",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the number of distinct field names in the language.\n",
    "line" : 50,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc10TSLanguageZk",
    "parameters" : [
     {
      "deco" : "PxS4libc10TSLanguage"
     }
    ]
   },
   {
    "name" : "ts_language_symbol_for_name",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the numerical id for the given node type string.\n",
    "line" : 54,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc10TSLanguagePxakbZt",
    "parameters" : [
     {
      "deco" : "PxS4libc10TSLanguage"
     },
     {
      "deco" : "Pxa"
     },
     {
      "deco" : "k"
     },
     {
      "deco" : "b"
     }
    ]
   },
   {
    "name" : "ts_language_symbol_name",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get a node type string for the given numerical id.\n",
    "line" : 58,
    "char" : 16,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc10TSLanguagetZPxa",
    "parameters" : [
     {
      "deco" : "PxS4libc10TSLanguage"
     },
     {
      "deco" : "t"
     }
    ]
   },
   {
    "name" : "ts_language_symbol_count",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the number of distinct node types in the language.\n",
    "line" : 62,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc10TSLanguageZk",
    "parameters" : [
     {
      "deco" : "PxS4libc10TSLanguage"
     }
    ]
   },
   {
    "name" : "ts_query_cursor_next_capture",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Advance to the next capture of the currently running query.\n\n If there is a capture, write its match to `*match` and its index within\n the matche's capture list to `*capture_index`. Otherwise, return `false`.\n",
    "line" : 69,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc13TSQueryCursorPSQw12TSQueryMatchPkZb",
    "parameters" : [
     {
      "deco" : "PS4libc13TSQueryCursor"
     },
     {
      "deco" : "PS4libc12TSQueryMatch"
     },
     {
      "deco" : "Pk"
     }
    ]
   },
   {
    "name" : "ts_query_cursor_remove_match",
    "kind" : "function",
    "protection" : "public",
    "line" : 71,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc13TSQueryCursorkZv",
    "parameters" : [
     {
      "deco" : "PS4libc13TSQueryCursor"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_query_cursor_next_match",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Advance to the next match of the currently running query.\n\n If there is a match, write it to `*match` and return `true`.\n Otherwise, return `false`.\n",
    "line" : 78,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc13TSQueryCursorPSQw12TSQueryMatchZb",
    "parameters" : [
     {
      "deco" : "PS4libc13TSQueryCursor"
     },
     {
      "deco" : "PS4libc12TSQueryMatch"
     }
    ]
   },
   {
    "name" : "ts_query_cursor_set_point_range",
    "kind" : "function",
    "protection" : "public",
    "line" : 80,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc13TSQueryCursorSQv7TSPointQlZv",
    "parameters" : [
     {
      "deco" : "PS4libc13TSQueryCursor"
     },
     {
      "deco" : "S4libc7TSPoint"
     },
     {
      "deco" : "S4libc7TSPoint"
     }
    ]
   },
   {
    "name" : "ts_query_cursor_set_byte_range",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Set the range of bytes or (row, column) positions in which the query\n will be executed.\n",
    "line" : 85,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc13TSQueryCursorkkZv",
    "parameters" : [
     {
      "deco" : "PS4libc13TSQueryCursor"
     },
     {
      "deco" : "k"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_query_cursor_set_match_limit",
    "kind" : "function",
    "protection" : "public",
    "line" : 87,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc13TSQueryCursorkZv",
    "parameters" : [
     {
      "deco" : "PS4libc13TSQueryCursor"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_query_cursor_match_limit",
    "kind" : "function",
    "protection" : "public",
    "line" : 89,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc13TSQueryCursorZk",
    "parameters" : [
     {
      "deco" : "PxS4libc13TSQueryCursor"
     }
    ]
   },
   {
    "name" : "ts_query_cursor_did_exceed_match_limit",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Manage the maximum number of in-progress matches allowed by this query\n cursor.\n\n Query cursors have an optional maximum capacity for storing lists of\n in-progress captures. If this capacity is exceeded, then the\n earliest-starting match will silently be dropped to make room for further\n matches. This maximum capacity is optional — by default, query cursors allow\n any number of pending matches, dynamically allocating new space for them as\n needed as the query is executed.\n",
    "line" : 101,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc13TSQueryCursorZb",
    "parameters" : [
     {
      "deco" : "PxS4libc13TSQueryCursor"
     }
    ]
   },
   {
    "name" : "ts_query_cursor_exec",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Start running a given query on a given node.\n",
    "line" : 105,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc13TSQueryCursorPxSQx7TSQuerySQBi6TSNodeZv",
    "parameters" : [
     {
      "deco" : "PS4libc13TSQueryCursor"
     },
     {
      "deco" : "PxS4libc7TSQuery"
     },
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_query_cursor_delete",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Delete a query cursor, freeing all of the memory that it used.\n",
    "line" : 109,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc13TSQueryCursorZv",
    "parameters" : [
     {
      "deco" : "PS4libc13TSQueryCursor"
     }
    ]
   },
   {
    "name" : "ts_query_cursor_new",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Create a new cursor for executing a given query.\n\n The cursor stores the state that is needed to iteratively search\n for matches. To use the query cursor, first call `ts_query_cursor_exec`\n to start running a given query on a given syntax node. Then, there are\n two options for consuming the results of the query:\n 1. Repeatedly call `ts_query_cursor_next_match` to iterate over all of the\n    *matches* in the order that they were found. Each match contains the\n    index of the pattern that matched, and an array of captures. Because\n    multiple patterns can match the same set of nodes, one match may contain\n    captures that appear *before* some of the captures from a previous match.\n 2. Repeatedly call `ts_query_cursor_next_capture` to iterate over all of the\n    individual *captures* in the order that they appear. This is useful if\n    don't care about which pattern matched, and just want a single ordered\n    sequence of captures.\n\n If you don't care about consuming all of the results, you can stop calling\n `ts_query_cursor_next_match` or `ts_query_cursor_next_capture` at any point.\n  You can then start executing another query on another node by calling\n  `ts_query_cursor_exec` again.\n",
    "line" : 132,
    "char" : 18,
    "linkage" : "c",
    "deco" : "UNbNiZPS4libc13TSQueryCursor"
   },
   {
    "name" : "ts_query_disable_pattern",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Disable a certain pattern within a query.\n\n This prevents the pattern from matching and removes most of the overhead\n associated with the pattern. Currently, there is no way to undo this.\n",
    "line" : 139,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc7TSQuerykZv",
    "parameters" : [
     {
      "deco" : "PS4libc7TSQuery"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_query_disable_capture",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Disable a certain capture within a query.\n\n This prevents the capture from being returned in matches, and also avoids\n any resource usage associated with recording the capture. Currently, there\n is no way to undo this.\n",
    "line" : 147,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc7TSQueryPxakZv",
    "parameters" : [
     {
      "deco" : "PS4libc7TSQuery"
     },
     {
      "deco" : "Pxa"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_query_string_value_for_id",
    "kind" : "function",
    "protection" : "public",
    "line" : 149,
    "char" : 16,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc7TSQuerykPkZPxa",
    "parameters" : [
     {
      "deco" : "PxS4libc7TSQuery"
     },
     {
      "deco" : "k"
     },
     {
      "deco" : "Pk"
     }
    ]
   },
   {
    "name" : "ts_query_capture_quantifier_for_id",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the quantifier of the query's captures. Each capture is * associated\n with a numeric id based on the order that it appeared in the query's source.\n",
    "line" : 154,
    "char" : 16,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc7TSQuerykkZEQr12_Anonymous_2",
    "originalType" : "nothrow @nogc extern (C) TSQuantifier(const(TSQuery)*, uint, uint)",
    "parameters" : [
     {
      "deco" : "PxS4libc7TSQuery"
     },
     {
      "deco" : "k"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_query_capture_name_for_id",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the name and length of one of the query's captures, or one of the\n query's string literals. Each capture and string is associated with a\n numeric id based on the order that it appeared in the query's source.\n",
    "line" : 160,
    "char" : 16,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc7TSQuerykPkZPxa",
    "parameters" : [
     {
      "deco" : "PxS4libc7TSQuery"
     },
     {
      "deco" : "k"
     },
     {
      "deco" : "Pk"
     }
    ]
   },
   {
    "name" : "ts_query_is_pattern_guaranteed_at_step",
    "kind" : "function",
    "protection" : "public",
    "line" : 162,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc7TSQuerykZb",
    "parameters" : [
     {
      "deco" : "PxS4libc7TSQuery"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_query_predicates_for_pattern",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get all of the predicates for the given pattern in the query.\n\n The predicates are represented as a single array of steps. There are three\n types of steps in this array, which correspond to the three legal values for\n the `type` field:\n - `TSQueryPredicateStepTypeCapture` - Steps with this type represent names\n    of captures. Their `value_id` can be used with the\n   `ts_query_capture_name_for_id` function to obtain the name of the capture.\n - `TSQueryPredicateStepTypeString` - Steps with this type represent literal\n    strings. Their `value_id` can be used with the\n    `ts_query_string_value_for_id` function to obtain their string value.\n - `TSQueryPredicateStepTypeDone` - Steps with this type are *sentinels*\n    that represent the end of an individual predicate. If a pattern has two\n    predicates, then there will be two steps with this `type` in the array.\n",
    "line" : 179,
    "char" : 32,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc7TSQuerykPkZPxSQu20TSQueryPredicateStep",
    "parameters" : [
     {
      "deco" : "PxS4libc7TSQuery"
     },
     {
      "deco" : "k"
     },
     {
      "deco" : "Pk"
     }
    ]
   },
   {
    "name" : "ts_query_start_byte_for_pattern",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the byte offset where the given pattern starts in the query's source.\n\n This can be useful when combining queries by concatenating their source\n code strings.\n",
    "line" : 186,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc7TSQuerykZk",
    "parameters" : [
     {
      "deco" : "PxS4libc7TSQuery"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_query_string_count",
    "kind" : "function",
    "protection" : "public",
    "line" : 188,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc7TSQueryZk",
    "parameters" : [
     {
      "deco" : "PxS4libc7TSQuery"
     }
    ]
   },
   {
    "name" : "ts_query_capture_count",
    "kind" : "function",
    "protection" : "public",
    "line" : 190,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc7TSQueryZk",
    "parameters" : [
     {
      "deco" : "PxS4libc7TSQuery"
     }
    ]
   },
   {
    "name" : "ts_query_pattern_count",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the number of patterns, captures, or string literals in the query.\n",
    "line" : 194,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc7TSQueryZk",
    "parameters" : [
     {
      "deco" : "PxS4libc7TSQuery"
     }
    ]
   },
   {
    "name" : "ts_query_delete",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Delete a query, freeing all of the memory that it used.\n",
    "line" : 198,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc7TSQueryZv",
    "parameters" : [
     {
      "deco" : "PS4libc7TSQuery"
     }
    ]
   },
   {
    "name" : "ts_query_new",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Create a new query from a string containing one or more S-expression\n patterns. The query is associated with a particular language, and can\n only be run on syntax nodes parsed with that language.\n\n If all of the given patterns are valid, this returns a `TSQuery`.\n If a pattern is invalid, this returns `NULL`, and provides two pieces\n of information about the problem:\n 1. The byte offset of the error is written to the `error_offset` parameter.\n 2. The type of error is written to the `error_type` parameter.\n",
    "line" : 210,
    "char" : 12,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc10TSLanguagePxakPkPEQz12_Anonymous_0ZPSQBs7TSQuery",
    "originalType" : "nothrow @nogc extern (C) TSQuery*(const(TSLanguage)*, const(char)*, uint, uint*, TSQueryError*)",
    "parameters" : [
     {
      "deco" : "PxS4libc10TSLanguage"
     },
     {
      "deco" : "Pxa"
     },
     {
      "deco" : "k"
     },
     {
      "deco" : "Pk"
     },
     {
      "deco" : "PE4libc12_Anonymous_0"
     }
    ]
   },
   {
    "name" : "ts_tree_cursor_copy",
    "kind" : "function",
    "protection" : "public",
    "line" : 212,
    "char" : 16,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc12TSTreeCursorZSQvQs",
    "parameters" : [
     {
      "deco" : "PxS4libc12TSTreeCursor"
     }
    ]
   },
   {
    "name" : "ts_tree_cursor_goto_first_child_for_point",
    "kind" : "function",
    "protection" : "public",
    "line" : 214,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc12TSTreeCursorSQu7TSPointZl",
    "parameters" : [
     {
      "deco" : "PS4libc12TSTreeCursor"
     },
     {
      "deco" : "S4libc7TSPoint"
     }
    ]
   },
   {
    "name" : "ts_tree_cursor_goto_first_child_for_byte",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Move the cursor to the first child of its current node that extends beyond\n the given byte offset or point.\n\n This returns the index of the child node if one was found, and returns -1\n if no such child was found.\n",
    "line" : 222,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc12TSTreeCursorkZl",
    "parameters" : [
     {
      "deco" : "PS4libc12TSTreeCursor"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_tree_cursor_goto_first_child",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Move the cursor to the first child of its current node.\n\n This returns `true` if the cursor successfully moved, and returns `false`\n if there were no children.\n",
    "line" : 229,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc12TSTreeCursorZb",
    "parameters" : [
     {
      "deco" : "PS4libc12TSTreeCursor"
     }
    ]
   },
   {
    "name" : "ts_tree_cursor_goto_next_sibling",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Move the cursor to the next sibling of its current node.\n\n This returns `true` if the cursor successfully moved, and returns `false`\n if there was no next sibling node.\n",
    "line" : 236,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc12TSTreeCursorZb",
    "parameters" : [
     {
      "deco" : "PS4libc12TSTreeCursor"
     }
    ]
   },
   {
    "name" : "ts_tree_cursor_goto_parent",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Move the cursor to the parent of its current node.\n\n This returns `true` if the cursor successfully moved, and returns `false`\n if there was no parent node (the cursor was already on the root node).\n",
    "line" : 243,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc12TSTreeCursorZb",
    "parameters" : [
     {
      "deco" : "PS4libc12TSTreeCursor"
     }
    ]
   },
   {
    "name" : "ts_tree_cursor_current_field_id",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the field id of the tree cursor's current node.\n\n This returns zero if the current node doesn't have a field.\n See also `ts_node_child_by_field_id`, `ts_language_field_id_for_name`.\n",
    "line" : 250,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc12TSTreeCursorZt",
    "parameters" : [
     {
      "deco" : "PxS4libc12TSTreeCursor"
     }
    ]
   },
   {
    "name" : "ts_tree_cursor_current_field_name",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the field name of the tree cursor's current node.\n\n This returns `NULL` if the current node doesn't have a field.\n See also `ts_node_child_by_field_name`.\n",
    "line" : 257,
    "char" : 16,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc12TSTreeCursorZPxa",
    "parameters" : [
     {
      "deco" : "PxS4libc12TSTreeCursor"
     }
    ]
   },
   {
    "name" : "ts_tree_cursor_current_node",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the tree cursor's current node.\n",
    "line" : 261,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc12TSTreeCursorZSQv6TSNode",
    "parameters" : [
     {
      "deco" : "PxS4libc12TSTreeCursor"
     }
    ]
   },
   {
    "name" : "ts_tree_cursor_reset",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Re-initialize a tree cursor to start at a different node.\n",
    "line" : 265,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc12TSTreeCursorSQu6TSNodeZv",
    "parameters" : [
     {
      "deco" : "PS4libc12TSTreeCursor"
     },
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_tree_cursor_delete",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Delete a tree cursor, freeing all of the memory that it used.\n",
    "line" : 269,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc12TSTreeCursorZv",
    "parameters" : [
     {
      "deco" : "PS4libc12TSTreeCursor"
     }
    ]
   },
   {
    "name" : "ts_tree_cursor_new",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Create a new tree cursor starting from the given node.\n\n A tree cursor allows you to walk a syntax tree more efficiently than is\n possible using the `TSNode` functions. It is a mutable object that is always\n on a certain syntax node, and can be moved imperatively to different nodes.\n",
    "line" : 277,
    "char" : 16,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZSQo12TSTreeCursor",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_eq",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Check if two nodes are identical.\n",
    "line" : 281,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeQnZb",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     },
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_edit",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Edit the node to keep it in-sync with source code that has been edited.\n\n This function is only rarely needed. When you edit a syntax tree with the\n `ts_tree_edit` function, all of the nodes that you retrieve from the tree\n afterward will already reflect the edit. You only need to use `ts_node_edit`\n when you have a `TSNode` instance that you want to keep and continue to use\n after an edit.\n",
    "line" : 291,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc6TSNodePxSQp11TSInputEditZv",
    "parameters" : [
     {
      "deco" : "PS4libc6TSNode"
     },
     {
      "deco" : "PxS4libc11TSInputEdit"
     }
    ]
   },
   {
    "name" : "ts_node_named_descendant_for_point_range",
    "kind" : "function",
    "protection" : "public",
    "line" : 293,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeSQn7TSPointQlZQBb",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     },
     {
      "deco" : "S4libc7TSPoint"
     },
     {
      "deco" : "S4libc7TSPoint"
     }
    ]
   },
   {
    "name" : "ts_node_named_descendant_for_byte_range",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the smallest named node within this node that spans the given range of\n bytes or (row, column) positions.\n",
    "line" : 298,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodekkZQq",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     },
     {
      "deco" : "k"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_node_descendant_for_point_range",
    "kind" : "function",
    "protection" : "public",
    "line" : 300,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeSQn7TSPointQlZQBb",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     },
     {
      "deco" : "S4libc7TSPoint"
     },
     {
      "deco" : "S4libc7TSPoint"
     }
    ]
   },
   {
    "name" : "ts_node_descendant_for_byte_range",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the smallest node within this node that spans the given range of bytes\n or (row, column) positions.\n",
    "line" : 305,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodekkZQq",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     },
     {
      "deco" : "k"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_node_first_named_child_for_byte",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's first named child that extends beyond the given byte offset.\n",
    "line" : 309,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodekZQp",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_node_first_child_for_byte",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's first child that extends beyond the given byte offset.\n",
    "line" : 313,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodekZQp",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_node_prev_named_sibling",
    "kind" : "function",
    "protection" : "public",
    "line" : 315,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZQo",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_next_named_sibling",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's next / previous *named* sibling.\n",
    "line" : 319,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZQo",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_prev_sibling",
    "kind" : "function",
    "protection" : "public",
    "line" : 321,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZQo",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_next_sibling",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's next / previous sibling.\n",
    "line" : 325,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZQo",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_child_by_field_id",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's child with the given numerical field id.\n\n You can convert a field name to an id using the\n `ts_language_field_id_for_name` function.\n",
    "line" : 332,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodetZQp",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     },
     {
      "deco" : "t"
     }
    ]
   },
   {
    "name" : "ts_node_child_by_field_name",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's child with the given field name.\n",
    "line" : 336,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodePxakZQs",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     },
     {
      "deco" : "Pxa"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_node_named_child_count",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's number of *named* children.\n\n See also `ts_node_is_named`.\n",
    "line" : 342,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZk",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_named_child",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's *named* child at the given index.\n\n See also `ts_node_is_named`.\n",
    "line" : 348,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodekZQp",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_node_child_count",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's number of children.\n",
    "line" : 352,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZk",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_field_name_for_child",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the field name for node's child at the given index, where zero represents\n the first child. Returns NULL, if no field is found.\n",
    "line" : 357,
    "char" : 16,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodekZPxa",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_node_child",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's child at the given index, where zero represents the first\n child.\n",
    "line" : 362,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodekZQp",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_node_parent",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's immediate parent.\n",
    "line" : 366,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZQo",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_has_error",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Check if the node is a syntax error or contains any syntax errors.\n",
    "line" : 370,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZb",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_has_changes",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Check if a syntax node has been edited.\n",
    "line" : 374,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZb",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_is_extra",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Check if the node is *extra*. Extra nodes represent things like comments,\n which are not required the grammar, but can appear anywhere.\n",
    "line" : 379,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZb",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_is_missing",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Check if the node is *missing*. Missing nodes are inserted by the parser in\n order to recover from certain kinds of syntax errors.\n",
    "line" : 384,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZb",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_is_named",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Check if the node is *named*. Named nodes correspond to named rules in the\n grammar, whereas *anonymous* nodes correspond to string literals in the\n grammar.\n",
    "line" : 390,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZb",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_is_null",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Check if the node is null. Functions like `ts_node_child` and\n `ts_node_next_sibling` will return a null node to indicate that no such node\n was found.\n",
    "line" : 396,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZb",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_string",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get an S-expression representing the node as a string.\n\n This string is allocated with `malloc` and the caller is responsible for\n freeing it using `free`.\n",
    "line" : 403,
    "char" : 9,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZPa",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_end_point",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's end position in terms of rows and columns.\n",
    "line" : 407,
    "char" : 11,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZSQo7TSPoint",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_end_byte",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's end byte.\n",
    "line" : 411,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZk",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_start_point",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's start position in terms of rows and columns.\n",
    "line" : 415,
    "char" : 11,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZSQo7TSPoint",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_start_byte",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's start byte.\n",
    "line" : 419,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZk",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_symbol",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's type as a numerical id.\n",
    "line" : 423,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZt",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_node_type",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the node's type as a null-terminated string.\n",
    "line" : 427,
    "char" : 16,
    "linkage" : "c",
    "deco" : "UNbNiS4libc6TSNodeZPxa",
    "parameters" : [
     {
      "deco" : "S4libc6TSNode"
     }
    ]
   },
   {
    "name" : "ts_tree_print_dot_graph",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Write a DOT graph describing the syntax tree to the given file.\n",
    "line" : 431,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc6TSTreePS4core4stdc5stdio6_iobufZv",
    "parameters" : [
     {
      "deco" : "PxS4libc6TSTree"
     },
     {
      "deco" : "PS4core4stdc5stdio6_iobuf"
     }
    ]
   },
   {
    "name" : "ts_tree_get_changed_ranges",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Compare an old edited syntax tree to a new syntax tree representing the same\n document, returning an array of ranges whose syntactic structure has changed.\n\n For this to work correctly, the old syntax tree must have been edited such\n that its ranges match up to the new tree. Generally, you'll want to call\n this function right after calling one of the `ts_parser_parse` functions.\n You need to pass the old tree that was passed to parse, as well as the new\n tree that was returned from that function.\n\n The returned array is allocated using `malloc` and the caller is responsible\n for freeing it using `free`. The length of the array will be written to the\n given `length` pointer.\n",
    "line" : 446,
    "char" : 12,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc6TSTreeQpPkZPSQt7TSRange",
    "parameters" : [
     {
      "deco" : "PxS4libc6TSTree"
     },
     {
      "deco" : "PxS4libc6TSTree"
     },
     {
      "deco" : "Pk"
     }
    ]
   },
   {
    "name" : "ts_tree_edit",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Edit the syntax tree to keep it in sync with source code that has been\n edited.\n\n You must describe the edit both in terms of byte offsets and in terms of\n (row, column) coordinates.\n",
    "line" : 454,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc6TSTreePxSQp11TSInputEditZv",
    "parameters" : [
     {
      "deco" : "PS4libc6TSTree"
     },
     {
      "deco" : "PxS4libc11TSInputEdit"
     }
    ]
   },
   {
    "name" : "ts_tree_language",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the language that was used to parse the syntax tree.\n",
    "line" : 458,
    "char" : 22,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc6TSTreeZPxSQq10TSLanguage",
    "parameters" : [
     {
      "deco" : "PxS4libc6TSTree"
     }
    ]
   },
   {
    "name" : "ts_tree_root_node",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the root node of the syntax tree.\n",
    "line" : 462,
    "char" : 10,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc6TSTreeZSQo6TSNode",
    "parameters" : [
     {
      "deco" : "PxS4libc6TSTree"
     }
    ]
   },
   {
    "name" : "ts_tree_delete",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Delete the syntax tree, freeing all of the memory that it used.\n",
    "line" : 466,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc6TSTreeZv",
    "parameters" : [
     {
      "deco" : "PS4libc6TSTree"
     }
    ]
   },
   {
    "name" : "ts_tree_copy",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Create a shallow copy of the syntax tree. This is very fast.\n\n You need to copy a syntax tree in order to use it on more than one thread at\n a time, as syntax trees are not thread safe.\n",
    "line" : 473,
    "char" : 11,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc6TSTreeZPSQpQm",
    "parameters" : [
     {
      "deco" : "PxS4libc6TSTree"
     }
    ]
   },
   {
    "name" : "ts_parser_print_dot_graphs",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Set the file descriptor to which the parser should write debugging graphs\n during parsing. The graphs are formatted in the DOT language. You may want\n to pipe these graphs directly to a `dot(1)` process in order to generate\n SVG output. You can turn off this logging by passing a negative number.\n",
    "line" : 480,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc8TSParseriZv",
    "parameters" : [
     {
      "deco" : "PS4libc8TSParser"
     },
     {
      "deco" : "i"
     }
    ]
   },
   {
    "name" : "ts_parser_logger",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the parser's current logger.\n",
    "line" : 484,
    "char" : 12,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc8TSParserZSQq8TSLogger",
    "parameters" : [
     {
      "deco" : "PxS4libc8TSParser"
     }
    ]
   },
   {
    "name" : "ts_parser_set_logger",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Set the logger that a parser should use during parsing.\n\n The parser does not take ownership over the logger payload. If a logger was\n previously assigned, the caller is responsible for releasing any memory\n owned by the previous logger.\n",
    "line" : 492,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc8TSParserSQp8TSLoggerZv",
    "parameters" : [
     {
      "deco" : "PS4libc8TSParser"
     },
     {
      "deco" : "S4libc8TSLogger"
     }
    ]
   },
   {
    "name" : "ts_parser_cancellation_flag",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the parser's current cancellation flag pointer.\n",
    "line" : 496,
    "char" : 17,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc8TSParserZPxm",
    "parameters" : [
     {
      "deco" : "PxS4libc8TSParser"
     }
    ]
   },
   {
    "name" : "ts_parser_set_cancellation_flag",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Set the parser's current cancellation flag pointer.\n\n If a non-null pointer is assigned, then the parser will periodically read\n from this pointer during parsing. If it reads a non-zero value, it will\n halt early, returning NULL. See `ts_parser_parse` for more information.\n",
    "line" : 504,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc8TSParserPxmZv",
    "parameters" : [
     {
      "deco" : "PS4libc8TSParser"
     },
     {
      "deco" : "Pxm"
     }
    ]
   },
   {
    "name" : "ts_parser_timeout_micros",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the duration in microseconds that parsing is allowed to take.\n",
    "line" : 508,
    "char" : 9,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc8TSParserZm",
    "parameters" : [
     {
      "deco" : "PxS4libc8TSParser"
     }
    ]
   },
   {
    "name" : "ts_parser_set_timeout_micros",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Set the maximum duration in microseconds that parsing should be allowed to\n take before halting.\n\n If parsing takes longer than this, it will halt early, returning NULL.\n See `ts_parser_parse` for more information.\n",
    "line" : 516,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc8TSParsermZv",
    "parameters" : [
     {
      "deco" : "PS4libc8TSParser"
     },
     {
      "deco" : "m"
     }
    ]
   },
   {
    "name" : "ts_parser_reset",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Instruct the parser to start the next parse from the beginning.\n\n If the parser previously failed because of a timeout or a cancellation, then\n by default, it will resume where it left off on the next call to\n `ts_parser_parse` or other parsing functions. If you don't want to resume,\n and instead intend to use this parser to parse some other document, you must\n call `ts_parser_reset` first.\n",
    "line" : 526,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc8TSParserZv",
    "parameters" : [
     {
      "deco" : "PS4libc8TSParser"
     }
    ]
   },
   {
    "name" : "ts_parser_parse_string_encoding",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Use the parser to parse some source code stored in one contiguous buffer with\n a given encoding. The first four parameters work the same as in the\n `ts_parser_parse_string` method above. The final parameter indicates whether\n the text is encoded as UTF8 or UTF16.\n",
    "line" : 533,
    "char" : 11,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc8TSParserPxSQr6TSTreePxakEQBf12_Anonymous_5ZPSQBzQBj",
    "originalType" : "nothrow @nogc extern (C) TSTree*(TSParser*, const(TSTree)*, const(char)*, uint, TSInputEncoding)",
    "parameters" : [
     {
      "deco" : "PS4libc8TSParser"
     },
     {
      "deco" : "PxS4libc6TSTree"
     },
     {
      "deco" : "Pxa"
     },
     {
      "deco" : "k"
     },
     {
      "deco" : "E4libc12_Anonymous_5"
     }
    ]
   },
   {
    "name" : "ts_parser_parse_string",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Use the parser to parse some source code stored in one contiguous buffer.\n The first two parameters are the same as in the `ts_parser_parse` function\n above. The second two parameters indicate the location of the buffer and its\n length in bytes.\n",
    "line" : 540,
    "char" : 11,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc8TSParserPxSQr6TSTreePxakZPSQBhQr",
    "parameters" : [
     {
      "deco" : "PS4libc8TSParser"
     },
     {
      "deco" : "PxS4libc6TSTree"
     },
     {
      "deco" : "Pxa"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_parser_parse",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Use the parser to parse some source code and create a syntax tree.\n\n If you are parsing this document for the first time, pass `NULL` for the\n `old_tree` parameter. Otherwise, if you have already parsed an earlier\n version of this document and the document has since been edited, pass the\n previous syntax tree so that the unchanged parts of it can be reused.\n This will save time and memory. For this to work correctly, you must have\n already edited the old syntax tree using the `ts_tree_edit` function in a\n way that exactly matches the source code changes.\n\n The `TSInput` parameter lets you specify how to read the text. It has the\n following three fields:\n 1. `read`: A function to retrieve a chunk of text at a given byte offset\n    and (row, column) position. The function should return a pointer to the\n    text and write its length to the `bytes_read` pointer. The parser does\n    not take ownership of this buffer; it just borrows it until it has\n    finished reading it. The function should write a zero value to the\n    `bytes_read` pointer to indicate the end of the document.\n 2. `payload`: An arbitrary pointer that will be passed to each invocation\n    of the `read` function.\n 3. `encoding`: An indication of how the text is encoded. Either\n    `TSInputEncodingUTF8` or `TSInputEncodingUTF16`.\n\n This function returns a syntax tree on success, and `NULL` on failure. There\n are three possible reasons for failure:\n 1. The parser does not have a language assigned. Check for this using the\n      `ts_parser_language` function.\n 2. Parsing was cancelled due to a timeout that was set by an earlier call to\n    the `ts_parser_set_timeout_micros` function. You can resume parsing from\n    where the parser left out by calling `ts_parser_parse` again with the\n    same arguments. Or you can start parsing from scratch by first calling\n    `ts_parser_reset`.\n 3. Parsing was cancelled using a cancellation flag that was set by an\n    earlier call to `ts_parser_set_cancellation_flag`. You can resume parsing\n    from where the parser left out by calling `ts_parser_parse` again with\n    the same arguments.\n",
    "line" : 579,
    "char" : 11,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc8TSParserPxSQr6TSTreeSQBb7TSInputZPSQBpQz",
    "parameters" : [
     {
      "deco" : "PS4libc8TSParser"
     },
     {
      "deco" : "PxS4libc6TSTree"
     },
     {
      "deco" : "S4libc7TSInput"
     }
    ]
   },
   {
    "name" : "ts_parser_included_ranges",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the ranges of text that the parser will include when parsing.\n\n The returned pointer is owned by the parser. The caller should not free it\n or write to it. The length of the array will be written to the given\n `length` pointer.\n",
    "line" : 587,
    "char" : 19,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc8TSParserPkZPxSQu7TSRange",
    "parameters" : [
     {
      "deco" : "PxS4libc8TSParser"
     },
     {
      "deco" : "Pk"
     }
    ]
   },
   {
    "name" : "ts_parser_set_included_ranges",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Set the ranges of text that the parser should include when parsing.\n\n By default, the parser will always include entire documents. This function\n allows you to parse only a *portion* of a document but still return a syntax\n tree whose ranges match up with the document as a whole. You can also pass\n multiple disjoint ranges.\n\n The second and third parameters specify the location and length of an array\n of ranges. The parser does *not* take ownership of these ranges; it copies\n the data, so it doesn't matter how these ranges are allocated.\n\n If `length` is zero, then the entire document will be parsed. Otherwise,\n the given ranges must be ordered from earliest to latest in the document,\n and they must not overlap. That is, the following must hold for all\n `i` < `length - 1`: ranges[i].end_byte <= ranges[i + 1].start_byte\n\n If this requirement is not satisfied, the operation will fail, the ranges\n will not be assigned, and this function will return `false`. On success,\n this function returns `true`\n",
    "line" : 609,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc8TSParserPxSQr7TSRangekZb",
    "parameters" : [
     {
      "deco" : "PS4libc8TSParser"
     },
     {
      "deco" : "PxS4libc7TSRange"
     },
     {
      "deco" : "k"
     }
    ]
   },
   {
    "name" : "ts_parser_language",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Get the parser's current language.\n",
    "line" : 613,
    "char" : 22,
    "linkage" : "c",
    "deco" : "UNbNiPxS4libc8TSParserZPxSQs10TSLanguage",
    "parameters" : [
     {
      "deco" : "PxS4libc8TSParser"
     }
    ]
   },
   {
    "name" : "ts_parser_set_language",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Set the language that the parser should use for parsing.\n\n Returns a boolean indicating whether or not the language was successfully\n assigned. True means assignment succeeded. False means there was a version\n mismatch: the language was generated with an incompatible version of the\n Tree-sitter CLI. Check the language's version using `ts_language_version`\n and compare it to this library's `TREE_SITTER_LANGUAGE_VERSION` and\n `TREE_SITTER_MIN_COMPATIBLE_LANGUAGE_VERSION` constants.\n",
    "line" : 624,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc8TSParserPxSQr10TSLanguageZb",
    "parameters" : [
     {
      "deco" : "PS4libc8TSParser"
     },
     {
      "deco" : "PxS4libc10TSLanguage"
     }
    ]
   },
   {
    "name" : "ts_parser_delete",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Delete the parser, freeing all of the memory that it used.\n",
    "line" : 628,
    "char" : 8,
    "linkage" : "c",
    "deco" : "UNbNiPS4libc8TSParserZv",
    "parameters" : [
     {
      "deco" : "PS4libc8TSParser"
     }
    ]
   },
   {
    "name" : "ts_parser_new",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Create a new parser.\n",
    "line" : 632,
    "char" : 13,
    "linkage" : "c",
    "deco" : "UNbNiZPS4libc8TSParser"
   },
   {
    "name" : "_Anonymous_0",
    "kind" : "enum",
    "protection" : "public",
    "line" : 634,
    "char" : 3,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "TSQueryErrorNone",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 637,
      "char" : 5
     },
     {
      "name" : "TSQueryErrorSyntax",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 639,
      "char" : 5
     },
     {
      "name" : "TSQueryErrorNodeType",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 641,
      "char" : 5
     },
     {
      "name" : "TSQueryErrorField",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "3",
      "line" : 643,
      "char" : 5
     },
     {
      "name" : "TSQueryErrorCapture",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "4",
      "line" : 645,
      "char" : 5
     },
     {
      "name" : "TSQueryErrorStructure",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "5",
      "line" : 647,
      "char" : 5
     },
     {
      "name" : "TSQueryErrorLanguage",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "6",
      "line" : 649,
      "char" : 5
     }
    ]
   },
   {
    "name" : "TSQueryErrorNone",
    "kind" : "variable",
    "protection" : "public",
    "line" : 652,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_0",
    "init" : "_Anonymous_0.TSQueryErrorNone"
   },
   {
    "name" : "TSQueryErrorSyntax",
    "kind" : "variable",
    "protection" : "public",
    "line" : 653,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_0",
    "init" : "_Anonymous_0.TSQueryErrorSyntax"
   },
   {
    "name" : "TSQueryErrorNodeType",
    "kind" : "variable",
    "protection" : "public",
    "line" : 654,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_0",
    "init" : "_Anonymous_0.TSQueryErrorNodeType"
   },
   {
    "name" : "TSQueryErrorField",
    "kind" : "variable",
    "protection" : "public",
    "line" : 655,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_0",
    "init" : "_Anonymous_0.TSQueryErrorField"
   },
   {
    "name" : "TSQueryErrorCapture",
    "kind" : "variable",
    "protection" : "public",
    "line" : 656,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_0",
    "init" : "_Anonymous_0.TSQueryErrorCapture"
   },
   {
    "name" : "TSQueryErrorStructure",
    "kind" : "variable",
    "protection" : "public",
    "line" : 657,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_0",
    "init" : "_Anonymous_0.TSQueryErrorStructure"
   },
   {
    "name" : "TSQueryErrorLanguage",
    "kind" : "variable",
    "protection" : "public",
    "line" : 658,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_0",
    "init" : "_Anonymous_0.TSQueryErrorLanguage"
   },
   {
    "name" : "TSQueryError",
    "kind" : "alias",
    "protection" : "public",
    "line" : 660,
    "char" : 3,
    "deco" : "E4libc12_Anonymous_0"
   },
   {
    "name" : "TSQueryPredicateStep",
    "kind" : "struct",
    "protection" : "public",
    "line" : 662,
    "char" : 3,
    "members" : [
     {
      "name" : "type",
      "kind" : "variable",
      "protection" : "public",
      "line" : 665,
      "char" : 30,
      "linkage" : "c",
      "deco" : "E4libc12_Anonymous_1",
      "originalType" : "TSQueryPredicateStepType",
      "offset" : 0
     },
     {
      "name" : "value_id",
      "kind" : "variable",
      "protection" : "public",
      "line" : 667,
      "char" : 10,
      "linkage" : "c",
      "deco" : "k",
      "offset" : 4
     }
    ]
   },
   {
    "name" : "_Anonymous_1",
    "kind" : "enum",
    "protection" : "public",
    "line" : 670,
    "char" : 3,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "TSQueryPredicateStepTypeDone",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 673,
      "char" : 5
     },
     {
      "name" : "TSQueryPredicateStepTypeCapture",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 675,
      "char" : 5
     },
     {
      "name" : "TSQueryPredicateStepTypeString",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 677,
      "char" : 5
     }
    ]
   },
   {
    "name" : "TSQueryPredicateStepTypeDone",
    "kind" : "variable",
    "protection" : "public",
    "line" : 680,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_1",
    "init" : "_Anonymous_1.TSQueryPredicateStepTypeDone"
   },
   {
    "name" : "TSQueryPredicateStepTypeCapture",
    "kind" : "variable",
    "protection" : "public",
    "line" : 681,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_1",
    "init" : "_Anonymous_1.TSQueryPredicateStepTypeCapture"
   },
   {
    "name" : "TSQueryPredicateStepTypeString",
    "kind" : "variable",
    "protection" : "public",
    "line" : 682,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_1",
    "init" : "_Anonymous_1.TSQueryPredicateStepTypeString"
   },
   {
    "name" : "TSQueryPredicateStepType",
    "kind" : "alias",
    "protection" : "public",
    "line" : 684,
    "char" : 3,
    "deco" : "E4libc12_Anonymous_1"
   },
   {
    "name" : "TSQueryMatch",
    "kind" : "struct",
    "protection" : "public",
    "line" : 686,
    "char" : 3,
    "members" : [
     {
      "name" : "id",
      "kind" : "variable",
      "protection" : "public",
      "line" : 689,
      "char" : 10,
      "linkage" : "c",
      "deco" : "k",
      "offset" : 0
     },
     {
      "name" : "pattern_index",
      "kind" : "variable",
      "protection" : "public",
      "line" : 691,
      "char" : 12,
      "linkage" : "c",
      "deco" : "t",
      "offset" : 4
     },
     {
      "name" : "capture_count",
      "kind" : "variable",
      "protection" : "public",
      "line" : 693,
      "char" : 12,
      "linkage" : "c",
      "deco" : "t",
      "offset" : 6
     },
     {
      "name" : "captures",
      "kind" : "variable",
      "protection" : "public",
      "line" : 695,
      "char" : 28,
      "linkage" : "c",
      "deco" : "PxS4libc14TSQueryCapture",
      "offset" : 8
     }
    ]
   },
   {
    "name" : "_Anonymous_2",
    "kind" : "enum",
    "protection" : "public",
    "line" : 698,
    "char" : 3,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "TSQuantifierZero",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 701,
      "char" : 5
     },
     {
      "name" : "TSQuantifierZeroOrOne",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 703,
      "char" : 5
     },
     {
      "name" : "TSQuantifierZeroOrMore",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 705,
      "char" : 5
     },
     {
      "name" : "TSQuantifierOne",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "3",
      "line" : 707,
      "char" : 5
     },
     {
      "name" : "TSQuantifierOneOrMore",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "4",
      "line" : 709,
      "char" : 5
     }
    ]
   },
   {
    "name" : "TSQuantifierZero",
    "kind" : "variable",
    "protection" : "public",
    "line" : 712,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_2",
    "init" : "_Anonymous_2.TSQuantifierZero"
   },
   {
    "name" : "TSQuantifierZeroOrOne",
    "kind" : "variable",
    "protection" : "public",
    "line" : 713,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_2",
    "init" : "_Anonymous_2.TSQuantifierZeroOrOne"
   },
   {
    "name" : "TSQuantifierZeroOrMore",
    "kind" : "variable",
    "protection" : "public",
    "line" : 714,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_2",
    "init" : "_Anonymous_2.TSQuantifierZeroOrMore"
   },
   {
    "name" : "TSQuantifierOne",
    "kind" : "variable",
    "protection" : "public",
    "line" : 715,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_2",
    "init" : "_Anonymous_2.TSQuantifierOne"
   },
   {
    "name" : "TSQuantifierOneOrMore",
    "kind" : "variable",
    "protection" : "public",
    "line" : 716,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_2",
    "init" : "_Anonymous_2.TSQuantifierOneOrMore"
   },
   {
    "name" : "TSQuantifier",
    "kind" : "alias",
    "protection" : "public",
    "line" : 718,
    "char" : 3,
    "deco" : "E4libc12_Anonymous_2"
   },
   {
    "name" : "TSQueryCapture",
    "kind" : "struct",
    "protection" : "public",
    "line" : 720,
    "char" : 3,
    "members" : [
     {
      "name" : "node",
      "kind" : "variable",
      "protection" : "public",
      "line" : 723,
      "char" : 12,
      "linkage" : "c",
      "deco" : "S4libc6TSNode",
      "offset" : 0
     },
     {
      "name" : "index",
      "kind" : "variable",
      "protection" : "public",
      "line" : 725,
      "char" : 10,
      "linkage" : "c",
      "deco" : "k",
      "offset" : 24
     }
    ]
   },
   {
    "name" : "TSTreeCursor",
    "kind" : "struct",
    "protection" : "public",
    "line" : 728,
    "char" : 3,
    "members" : [
     {
      "name" : "tree",
      "kind" : "variable",
      "protection" : "public",
      "line" : 731,
      "char" : 18,
      "linkage" : "c",
      "deco" : "Pxv",
      "offset" : 0
     },
     {
      "name" : "id",
      "kind" : "variable",
      "protection" : "public",
      "line" : 733,
      "char" : 18,
      "linkage" : "c",
      "deco" : "Pxv",
      "offset" : 4
     },
     {
      "name" : "context",
      "kind" : "variable",
      "protection" : "public",
      "line" : 735,
      "char" : 13,
      "linkage" : "c",
      "deco" : "G2k",
      "offset" : 8
     }
    ]
   },
   {
    "name" : "TSNode",
    "kind" : "struct",
    "protection" : "public",
    "line" : 738,
    "char" : 3,
    "members" : [
     {
      "name" : "context",
      "kind" : "variable",
      "protection" : "public",
      "line" : 741,
      "char" : 13,
      "linkage" : "c",
      "deco" : "G4k",
      "offset" : 0
     },
     {
      "name" : "id",
      "kind" : "variable",
      "protection" : "public",
      "line" : 743,
      "char" : 18,
      "linkage" : "c",
      "deco" : "Pxv",
      "offset" : 16
     },
     {
      "name" : "tree",
      "kind" : "variable",
      "protection" : "public",
      "line" : 745,
      "char" : 20,
      "linkage" : "c",
      "deco" : "PxS4libc6TSTree",
      "offset" : 20
     }
    ]
   },
   {
    "name" : "TSInputEdit",
    "kind" : "struct",
    "protection" : "public",
    "line" : 748,
    "char" : 3,
    "members" : [
     {
      "name" : "start_byte",
      "kind" : "variable",
      "protection" : "public",
      "line" : 751,
      "char" : 10,
      "linkage" : "c",
      "deco" : "k",
      "offset" : 0
     },
     {
      "name" : "old_end_byte",
      "kind" : "variable",
      "protection" : "public",
      "line" : 753,
      "char" : 10,
      "linkage" : "c",
      "deco" : "k",
      "offset" : 4
     },
     {
      "name" : "new_end_byte",
      "kind" : "variable",
      "protection" : "public",
      "line" : 755,
      "char" : 10,
      "linkage" : "c",
      "deco" : "k",
      "offset" : 8
     },
     {
      "name" : "start_point",
      "kind" : "variable",
      "protection" : "public",
      "line" : 757,
      "char" : 13,
      "linkage" : "c",
      "deco" : "S4libc7TSPoint",
      "offset" : 12
     },
     {
      "name" : "old_end_point",
      "kind" : "variable",
      "protection" : "public",
      "line" : 759,
      "char" : 13,
      "linkage" : "c",
      "deco" : "S4libc7TSPoint",
      "offset" : 20
     },
     {
      "name" : "new_end_point",
      "kind" : "variable",
      "protection" : "public",
      "line" : 761,
      "char" : 13,
      "linkage" : "c",
      "deco" : "S4libc7TSPoint",
      "offset" : 28
     }
    ]
   },
   {
    "name" : "TSLogger",
    "kind" : "struct",
    "protection" : "public",
    "line" : 764,
    "char" : 3,
    "members" : [
     {
      "name" : "payload",
      "kind" : "variable",
      "protection" : "public",
      "line" : 767,
      "char" : 11,
      "linkage" : "c",
      "deco" : "Pv",
      "offset" : 0
     },
     {
      "name" : "log",
      "kind" : "variable",
      "protection" : "public",
      "line" : 769,
      "char" : 51,
      "linkage" : "c",
      "deco" : "PUPvE4libc12_Anonymous_3PxaZv",
      "originalType" : "extern (C) void function(void*, TSLogType, const(char)*)",
      "offset" : 4
     }
    ]
   },
   {
    "name" : "_Anonymous_3",
    "kind" : "enum",
    "protection" : "public",
    "line" : 772,
    "char" : 3,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "TSLogTypeParse",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 775,
      "char" : 5
     },
     {
      "name" : "TSLogTypeLex",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 777,
      "char" : 5
     }
    ]
   },
   {
    "name" : "TSLogTypeParse",
    "kind" : "variable",
    "protection" : "public",
    "line" : 780,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_3",
    "init" : "_Anonymous_3.TSLogTypeParse"
   },
   {
    "name" : "TSLogTypeLex",
    "kind" : "variable",
    "protection" : "public",
    "line" : 781,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_3",
    "init" : "_Anonymous_3.TSLogTypeLex"
   },
   {
    "name" : "TSLogType",
    "kind" : "alias",
    "protection" : "public",
    "line" : 783,
    "char" : 3,
    "deco" : "E4libc12_Anonymous_3"
   },
   {
    "name" : "TSInput",
    "kind" : "struct",
    "protection" : "public",
    "line" : 785,
    "char" : 3,
    "members" : [
     {
      "name" : "payload",
      "kind" : "variable",
      "protection" : "public",
      "line" : 788,
      "char" : 11,
      "linkage" : "c",
      "deco" : "Pv",
      "offset" : 0
     },
     {
      "name" : "read",
      "kind" : "variable",
      "protection" : "public",
      "line" : 790,
      "char" : 56,
      "linkage" : "c",
      "deco" : "PUPvkS4libc7TSPointPkZPxa",
      "offset" : 4
     },
     {
      "name" : "encoding",
      "kind" : "variable",
      "protection" : "public",
      "line" : 792,
      "char" : 21,
      "linkage" : "c",
      "deco" : "E4libc12_Anonymous_5",
      "originalType" : "TSInputEncoding",
      "offset" : 8
     }
    ]
   },
   {
    "name" : "TSRange",
    "kind" : "struct",
    "protection" : "public",
    "line" : 795,
    "char" : 3,
    "members" : [
     {
      "name" : "start_point",
      "kind" : "variable",
      "protection" : "public",
      "line" : 798,
      "char" : 13,
      "linkage" : "c",
      "deco" : "S4libc7TSPoint",
      "offset" : 0
     },
     {
      "name" : "end_point",
      "kind" : "variable",
      "protection" : "public",
      "line" : 800,
      "char" : 13,
      "linkage" : "c",
      "deco" : "S4libc7TSPoint",
      "offset" : 8
     },
     {
      "name" : "start_byte",
      "kind" : "variable",
      "protection" : "public",
      "line" : 802,
      "char" : 10,
      "linkage" : "c",
      "deco" : "k",
      "offset" : 16
     },
     {
      "name" : "end_byte",
      "kind" : "variable",
      "protection" : "public",
      "line" : 804,
      "char" : 10,
      "linkage" : "c",
      "deco" : "k",
      "offset" : 20
     }
    ]
   },
   {
    "name" : "TSPoint",
    "kind" : "struct",
    "protection" : "public",
    "line" : 807,
    "char" : 3,
    "members" : [
     {
      "name" : "row",
      "kind" : "variable",
      "protection" : "public",
      "line" : 810,
      "char" : 10,
      "linkage" : "c",
      "deco" : "k",
      "offset" : 0
     },
     {
      "name" : "column",
      "kind" : "variable",
      "protection" : "public",
      "line" : 812,
      "char" : 10,
      "linkage" : "c",
      "deco" : "k",
      "offset" : 4
     }
    ]
   },
   {
    "name" : "_Anonymous_4",
    "kind" : "enum",
    "protection" : "public",
    "line" : 815,
    "char" : 3,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "TSSymbolTypeRegular",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 818,
      "char" : 5
     },
     {
      "name" : "TSSymbolTypeAnonymous",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 820,
      "char" : 5
     },
     {
      "name" : "TSSymbolTypeAuxiliary",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 822,
      "char" : 5
     }
    ]
   },
   {
    "name" : "TSSymbolTypeRegular",
    "kind" : "variable",
    "protection" : "public",
    "line" : 825,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_4",
    "init" : "_Anonymous_4.TSSymbolTypeRegular"
   },
   {
    "name" : "TSSymbolTypeAnonymous",
    "kind" : "variable",
    "protection" : "public",
    "line" : 826,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_4",
    "init" : "_Anonymous_4.TSSymbolTypeAnonymous"
   },
   {
    "name" : "TSSymbolTypeAuxiliary",
    "kind" : "variable",
    "protection" : "public",
    "line" : 827,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_4",
    "init" : "_Anonymous_4.TSSymbolTypeAuxiliary"
   },
   {
    "name" : "TSSymbolType",
    "kind" : "alias",
    "protection" : "public",
    "line" : 829,
    "char" : 3,
    "deco" : "E4libc12_Anonymous_4"
   },
   {
    "name" : "_Anonymous_5",
    "kind" : "enum",
    "protection" : "public",
    "line" : 831,
    "char" : 3,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "TSInputEncodingUTF8",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 834,
      "char" : 5
     },
     {
      "name" : "TSInputEncodingUTF16",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 836,
      "char" : 5
     }
    ]
   },
   {
    "name" : "TSInputEncodingUTF8",
    "kind" : "variable",
    "protection" : "public",
    "line" : 839,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_5",
    "init" : "_Anonymous_5.TSInputEncodingUTF8"
   },
   {
    "name" : "TSInputEncodingUTF16",
    "kind" : "variable",
    "protection" : "public",
    "line" : 840,
    "char" : 8,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "E4libc12_Anonymous_5",
    "init" : "_Anonymous_5.TSInputEncodingUTF16"
   },
   {
    "name" : "TSInputEncoding",
    "kind" : "alias",
    "protection" : "public",
    "line" : 842,
    "char" : 3,
    "deco" : "E4libc12_Anonymous_5"
   },
   {
    "name" : "TSQueryCursor",
    "kind" : "struct",
    "protection" : "public",
    "line" : 843,
    "char" : 3
   },
   {
    "name" : "TSQuery",
    "kind" : "struct",
    "protection" : "public",
    "line" : 844,
    "char" : 3
   },
   {
    "name" : "TSTree",
    "kind" : "struct",
    "protection" : "public",
    "line" : 845,
    "char" : 3
   },
   {
    "name" : "TSParser",
    "kind" : "struct",
    "protection" : "public",
    "line" : 846,
    "char" : 3
   },
   {
    "name" : "TSLanguage",
    "kind" : "struct",
    "protection" : "public",
    "line" : 847,
    "char" : 3
   },
   {
    "name" : "TSFieldId",
    "kind" : "alias",
    "protection" : "public",
    "line" : 849,
    "char" : 3,
    "deco" : "t"
   },
   {
    "name" : "TSSymbol",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "\n",
    "line" : 851,
    "char" : 3,
    "deco" : "t"
   },
   {
    "name" : "core.stdc.stdbool",
    "kind" : "import",
    "line" : 852,
    "char" : 10,
    "protection" : "private"
   },
   {
    "name" : "core.stdc.stdint",
    "kind" : "import",
    "line" : 853,
    "char" : 10,
    "protection" : "private"
   },
   {
    "name" : "core.stdc.stdlib",
    "kind" : "import",
    "line" : 854,
    "char" : 10,
    "protection" : "private"
   },
   {
    "name" : "core.stdc.stdio",
    "kind" : "import",
    "line" : 855,
    "char" : 10,
    "protection" : "private"
   },
   {
    "name" : "enumMixinStr_TREE_SITTER_LANGUAGE_VERSION",
    "kind" : "variable",
    "protection" : "private",
    "line" : 859,
    "char" : 18,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "Aya",
    "init" : "\"enum TREE_SITTER_LANGUAGE_VERSION = 14;\""
   },
   {
    "name" : "TREE_SITTER_LANGUAGE_VERSION",
    "kind" : "variable",
    "protection" : "public",
    "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\libc.d-mixin-862",
    "line" : 862,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "i",
    "init" : "14"
   },
   {
    "name" : "enumMixinStr_TREE_SITTER_MIN_COMPATIBLE_LANGUAGE_VERSION",
    "kind" : "variable",
    "protection" : "private",
    "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\libc.d",
    "line" : 868,
    "char" : 18,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "Aya",
    "init" : "\"enum TREE_SITTER_MIN_COMPATIBLE_LANGUAGE_VERSION = 13;\""
   },
   {
    "name" : "TREE_SITTER_MIN_COMPATIBLE_LANGUAGE_VERSION",
    "kind" : "variable",
    "protection" : "public",
    "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\libc.d-mixin-873",
    "line" : 873,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "linkage" : "c",
    "deco" : "i",
    "init" : "13"
   }
  ]
 },
 {
  "name" : "node",
  "kind" : "module",
  "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\node.d",
  "members" : [
   {
    "name" : "language",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "tree_cursor",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "tree_visitor",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "other",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "iota",
     "Nullable"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "fromStringz",
     "toStringz"
    ]
   },
   {
    "name" : "Node",
    "kind" : "struct",
    "protection" : "public",
    "comment" : " A single `Node` within a syntax `Tree`.\n",
    "line" : 14,
    "char" : 1,
    "members" : [
     {
      "name" : "libc",
      "kind" : "import",
      "line" : 16,
      "char" : 10,
      "protection" : "private",
      "selective" : [
       "TSNode",
       "ts_node_symbol",
       "ts_node_type",
       "ts_tree_language",
       "ts_node_is_named",
       "ts_node_is_extra",
       "ts_node_has_changes",
       "ts_node_has_error",
       "ts_node_is_missing",
       "ts_node_start_byte",
       "ts_node_end_byte",
       "ts_node_start_point",
       "ts_node_end_point",
       "ts_node_child",
       "ts_node_child_count",
       "ts_node_named_child",
       "ts_node_named_child_count",
       "ts_node_child_by_field_name",
       "ts_node_child_by_field_id",
       "ts_node_parent",
       "ts_node_next_sibling",
       "ts_node_prev_sibling",
       "ts_node_next_named_sibling",
       "ts_node_prev_named_sibling",
       "ts_node_descendant_for_byte_range",
       "ts_node_named_descendant_for_byte_range",
       "ts_node_descendant_for_point_range",
       "ts_node_named_descendant_for_point_range",
       "ts_node_string",
       "ts_tree_cursor_new",
       "ts_node_edit",
       "ts_node_is_null"
      ]
     },
     {
      "name" : "tsnode",
      "kind" : "variable",
      "protection" : "public",
      "comment" : " The internal `TSNode`\n",
      "line" : 30,
      "char" : 10,
      "linkage" : "c",
      "deco" : "S4libc6TSNode",
      "offset" : 0
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : " Create a new Node.\n    Throws:\n      If the passed tsnode is null, it will trigger an error in the debug mode.\n",
      "line" : 36,
      "char" : 3,
      "linkage" : "c",
      "deco" : "UNbNcNiS4libc6TSNodeZS4node4Node",
      "originalType" : "nothrow @nogc ref extern (C) (TSNode tsnode)",
      "parameters" : [
       {
        "name" : "tsnode",
        "deco" : "S4libc6TSNode"
       }
      ],
      "endline" : 43,
      "endchar" : 3
     },
     {
      "name" : "create",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Creates a new Node from the given nullable TSNode\n\n    Params:\n      tsnode = a C tsnode, which can be a `null` node.\n\n    Returns:\n      a `Nullable!Node`, which gives the node if it is not a `null` node, and `null` if it is.\n",
      "line" : 53,
      "char" : 24,
      "storageClass" : [
       "static"
      ],
      "linkage" : "c",
      "deco" : "UNbNiNeS4libc6TSNodeZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "nothrow @nogc @trusted extern (C) Nullable!Node(TSNode tsnode)",
      "parameters" : [
       {
        "name" : "tsnode",
        "deco" : "S4libc6TSNode"
       }
      ],
      "endline" : 63,
      "endchar" : 3
     },
     {
      "name" : "isNull",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Check if the Node is a `null` node.\n\n    Note:\n      this function should be only used when creating a `Node` with its constructor in the release mode (instead of using `Node.create`).\n      All the methods of `Node` already use `Node.create` and return a `Nullable!Node`.\n",
      "line" : 71,
      "char" : 8,
      "linkage" : "c",
      "deco" : "UZb",
      "endline" : 74,
      "endchar" : 3
     },
     {
      "name" : "id",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get a numeric id for this node that is unique.\n\n    Within a given syntax tree, no two nodes have the same id. However, if\n    a new tree is created based on an older tree, and a node from the old\n    tree is reused in the process, then that node will have the same id in\n    both trees.\n",
      "line" : 84,
      "char" : 8,
      "storageClass" : [
       "auto",
       "return"
      ],
      "linkage" : "c",
      "deco" : "xUNaNbNiNfZxPv",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 87,
      "endchar" : 3
     },
     {
      "name" : "kind_id",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get this node's type as a numerical id.\n",
      "line" : 90,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZt",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 93,
      "endchar" : 3
     },
     {
      "name" : "kind",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get this node's type as a string.\n",
      "line" : 96,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZAxa",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 99,
      "endchar" : 3
     },
     {
      "name" : "language",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the [Language] that was used to parse this node's syntax tree.\n",
      "line" : 102,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS8language8Language",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 105,
      "endchar" : 3
     },
     {
      "name" : "is_named",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Check if this node is *named*.\n\n    Named nodes correspond to named rules in the grammar, whereas *anonymous* nodes\n    correspond to string literals in the grammar.\n",
      "line" : 113,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZb",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 116,
      "endchar" : 3
     },
     {
      "name" : "is_extra",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Check if this node is *extra*.\n\n    Extra nodes represent things like comments, which are not required the grammar,\n    but can appear anywhere.\n",
      "line" : 124,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZb",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 127,
      "endchar" : 3
     },
     {
      "name" : "has_changes",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Check if this node has been edited\n",
      "line" : 132,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZb",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 135,
      "endchar" : 3
     },
     {
      "name" : "has_error",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Check if this node represents a syntax error or contains any syntax errors anywhere\n    within it.\n",
      "line" : 141,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZb",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 144,
      "endchar" : 3
     },
     {
      "name" : "is_error",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Check if this node represents a syntax error.\n\n    Syntax errors represent parts of the code that could not be incorporated into a\n    valid syntax tree.\n",
      "line" : 152,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZb",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 155,
      "endchar" : 3
     },
     {
      "name" : "is_missing",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Check if this node is *missing*.\n\n    Missing nodes are inserted by the parser in order to recover from certain kinds of\n    syntax errors.\n",
      "line" : 163,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZb",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 166,
      "endchar" : 3
     },
     {
      "name" : "start_byte",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get the byte offsets where this node starts\n",
      "line" : 171,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZk",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 174,
      "endchar" : 3
     },
     {
      "name" : "end_byte",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get the byte offsets where this node end.\n",
      "line" : 179,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZk",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 182,
      "endchar" : 3
     },
     {
      "name" : "byte_range",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get the byte range of source code that this node represents.\n",
      "line" : 187,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS3std5range__T4iotaTkTkZQkFkkZ6Result",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 190,
      "endchar" : 3
     },
     {
      "name" : "start_position",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get this node's start position in terms of rows and columns.\n",
      "line" : 195,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS4libc7TSPoint",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 198,
      "endchar" : 3
     },
     {
      "name" : "end_position",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get this node's end position in terms of rows and columns.\n",
      "line" : 203,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS4libc7TSPoint",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 206,
      "endchar" : 3
     },
     {
      "name" : "range",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get the range of source code that this node represents, both in terms of raw bytes\n    and of row/column coordinates.\n",
      "line" : 212,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS4libc7TSRange",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 215,
      "endchar" : 3
     },
     {
      "name" : "child",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get the node's child at the given index, where zero represents the first\n    child.\n\n    This method is fairly fast, but its cost is technically log(child_index), so you\n    if you might be iterating over a long list of children, you should use\n    [Node::children] instead.\n\n    Returns:\n      A `Nulllable!Node`\n",
      "line" : 228,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNikZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "const nothrow @nogc extern (C) (size_t child_index)",
      "parameters" : [
       {
        "name" : "child_index",
        "deco" : "k"
       }
      ],
      "endline" : 231,
      "endchar" : 3
     },
     {
      "name" : "child_count",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get this node's number of children\n",
      "line" : 236,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZk",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 239,
      "endchar" : 3
     },
     {
      "name" : "named_child",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get this node's *named* child at the given index.\n\n    See also [Node::is_named].\n    This method is fairly fast, but its cost is technically log(i), so you\n    if you might be iterating over a long list of children, you should use\n    [Node::named_children] instead.\n\n    Returns:\n      A `Nulllable!Node`\n",
      "line" : 252,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNikZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "const nothrow @nogc extern (C) (size_t i)",
      "parameters" : [
       {
        "name" : "i",
        "deco" : "k"
       }
      ],
      "endline" : 255,
      "endchar" : 3
     },
     {
      "name" : "named_child_count",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get this node's number of *named* children.\n\n    See also [Node::is_named].\n",
      "line" : 262,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZk",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 265,
      "endchar" : 3
     },
     {
      "name" : "child_by_field_name",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get the first child with the given field name.\n\n    If multiple children may have the same field name, access them using\n    [children_by_field_name](Node::children_by_field_name)\n\n    Returns:\n      A `Nulllable!Node`\n",
      "line" : 276,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbAyaZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "const extern (C) (string field_name)",
      "parameters" : [
       {
        "name" : "field_name",
        "deco" : "Aya",
        "storageClass" : [
         "scope"
        ]
       }
      ],
      "endline" : 282,
      "endchar" : 3
     },
     {
      "name" : "child_by_field_id",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get the first child with the given field name.\n\n    If multiple children may have the same field name, access them using\n    [children_by_field_name](Node::children_by_field_name)\n\n    Returns:\n      A `Nulllable!Node`\n",
      "line" : 293,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNitZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "const nothrow @nogc extern (C) (ushort field_id)",
      "parameters" : [
       {
        "name" : "field_id",
        "deco" : "t"
       }
      ],
      "endline" : 296,
      "endchar" : 3
     },
     {
      "name" : "children",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Iterate over this node children.\n\n      A [TreeCursor] is used to retrieve the children efficiently. Obtain\n      a [TreeCursor] by calling [Tree::walk] or [Node::walk]. To avoid unnecessary\n      allocations, you should reuse the same cursor for subsequent calls to\n      this method.\n\n      If you're walking the tree recursively, you may want to use the `TreeCursor`\n      APIs directly instead.\n",
      "line" : 308,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiPS11tree_cursor10TreeCursorZS4node12NodeChildren",
      "originalType" : "const nothrow @nogc extern (C) (TreeCursor* cursor)",
      "parameters" : [
       {
        "name" : "cursor",
        "deco" : "PS11tree_cursor10TreeCursor"
       }
      ],
      "endline" : 311,
      "endchar" : 3
     },
     {
      "name" : "named_children",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Iterate over this node named children.\n\n      See also [Node::children].\n",
      "line" : 317,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiPS11tree_cursor10TreeCursorZS4node17NodeNamedChildren",
      "originalType" : "const nothrow @nogc extern (C) (TreeCursor* cursor)",
      "parameters" : [
       {
        "name" : "cursor",
        "deco" : "PS11tree_cursor10TreeCursor"
       }
      ],
      "endline" : 320,
      "endchar" : 3
     },
     {
      "name" : "children_by_field_id",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Iterate over this node children with a given field id.\n\n      See also [Node::children_by_field_name].\n",
      "line" : 326,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNitPS11tree_cursor10TreeCursorZS4node21NodeChildrenByFieldID",
      "originalType" : "const nothrow @nogc extern (C) (ushort field_id, TreeCursor* cursor)",
      "parameters" : [
       {
        "name" : "field_id",
        "deco" : "t"
       },
       {
        "name" : "cursor",
        "deco" : "PS11tree_cursor10TreeCursor"
       }
      ],
      "endline" : 329,
      "endchar" : 3
     },
     {
      "name" : "children_by_field_name",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Iterate over this node children with a given field name.\n\n      See also [Node::children].\n",
      "line" : 335,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUAyaPS11tree_cursor10TreeCursorZS4node21NodeChildrenByFieldID",
      "originalType" : "const extern (C) (string field_name, TreeCursor* cursor)",
      "parameters" : [
       {
        "name" : "field_name",
        "deco" : "Aya",
        "storageClass" : [
         "scope"
        ]
       },
       {
        "name" : "cursor",
        "deco" : "PS11tree_cursor10TreeCursor"
       }
      ],
      "endline" : 339,
      "endchar" : 3
     },
     {
      "name" : "has_parent",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Check if the node has a immediate parent\n    Note:\n     `parent` method already does this check\n",
      "line" : 345,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZb",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 349,
      "endchar" : 3
     },
     {
      "name" : "parent",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Get this node immediate parent.\n\n    Returns:\n      a `Nullable!Node`, which gives the parent node if it has a parent, and `null` if the node has no parent.\n",
      "line" : 356,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 359,
      "endchar" : 3
     },
     {
      "name" : "nth_parent",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Find the nth parent of node. It goes up until it hits a null parent or `max_nth`.\n    Params:\n      max_nth = the maximum level to go up.\n    Returns:\n      A node. If the given node doesn't have a parent, it returns the node itself.\n    Note: the nth might not be reached if there are no more parents.\n",
      "line" : 368,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiNeIkZxS4node4Node",
      "originalType" : "const nothrow @nogc @trusted extern (C) (in uint max_nth = 2)",
      "parameters" : [
       {
        "name" : "max_nth",
        "deco" : "xk",
        "storageClass" : [
         "in"
        ],
        "default" : "2u"
       }
      ],
      "endline" : 393,
      "endchar" : 3
     },
     {
      "name" : "has_next_sibling",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Check if the node has a next sibling.\n    Note:\n     `next_sibling` method already does this check\n",
      "line" : 399,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZb",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 403,
      "endchar" : 3
     },
     {
      "name" : "next_sibling",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Get this node next sibling.\n    Returns:\n      A `Nulllable!Node`\n",
      "line" : 409,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 412,
      "endchar" : 3
     },
     {
      "name" : "has_prev_sibling",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Check if the node has a previous sibling.\n    Note:\n     `prev_sibling` method already does this check\n",
      "line" : 418,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZb",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 422,
      "endchar" : 3
     },
     {
      "name" : "prev_sibling",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Get this node previous sibling.\n\n    Returns:\n      A `Nulllable!Node`\n",
      "line" : 429,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 432,
      "endchar" : 3
     },
     {
      "name" : "next_named_sibling",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Get this node next named sibling.\n\n    Returns:\n      A `Nulllable!Node`\n",
      "line" : 439,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 442,
      "endchar" : 3
     },
     {
      "name" : "prev_named_sibling",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Get this node previous named sibling.\n\n    Returns:\n      A `Nulllable!Node`\n",
      "line" : 449,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 452,
      "endchar" : 3
     },
     {
      "name" : "descendant_for_byte_range",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Get the smallest node within this node that spans the given range.\n\n    Returns:\n      A `Nulllable!Node`\n",
      "line" : 459,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNikkZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "const nothrow @nogc extern (C) (uint start, uint end)",
      "parameters" : [
       {
        "name" : "start",
        "deco" : "k"
       },
       {
        "name" : "end",
        "deco" : "k"
       }
      ],
      "endline" : 462,
      "endchar" : 3
     },
     {
      "name" : "named_descendant_for_byte_range",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Get the smallest named node within this node that spans the given range.\n\n    Returns:\n      A `Nulllable!Node`\n",
      "line" : 469,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNikkZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "const nothrow @nogc extern (C) (uint start, uint end)",
      "parameters" : [
       {
        "name" : "start",
        "deco" : "k"
       },
       {
        "name" : "end",
        "deco" : "k"
       }
      ],
      "endline" : 472,
      "endchar" : 3
     },
     {
      "name" : "descendant_for_point_range",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Get the smallest node within this node that spans the given range.\n\n    Returns:\n      A `Nulllable!Node`\n",
      "line" : 479,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiS4libc7TSPointQoZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "const nothrow @nogc extern (C) (Point start, Point end)",
      "parameters" : [
       {
        "name" : "start",
        "deco" : "S4libc7TSPoint"
       },
       {
        "name" : "end",
        "deco" : "S4libc7TSPoint"
       }
      ],
      "endline" : 482,
      "endchar" : 3
     },
     {
      "name" : "named_descendant_for_point_range",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Get the smallest named node within this node that spans the given range.\n\n    Returns:\n      A `Nulllable!Node`\n",
      "line" : 489,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiS4libc7TSPointQoZS3std8typecons__T8NullableTS4node4NodeZQw",
      "originalType" : "const nothrow @nogc extern (C) (Point start, Point end)",
      "parameters" : [
       {
        "name" : "start",
        "deco" : "S4libc7TSPoint"
       },
       {
        "name" : "end",
        "deco" : "S4libc7TSPoint"
       }
      ],
      "endline" : 492,
      "endchar" : 3
     },
     {
      "name" : "to_string",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Convert Node to string\n",
      "line" : 495,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbZAya",
      "originalType" : "const nothrow extern (C) ()",
      "endline" : 503,
      "endchar" : 3
     },
     {
      "name" : "to_sexp",
      "kind" : "alias",
      "protection" : "public",
      "line" : 505,
      "char" : 3,
      "originalType" : "to_string"
     },
     {
      "name" : "std.string",
      "kind" : "import",
      "line" : 507,
      "char" : 10,
      "protection" : "private",
      "selective" : [
       "assumeUTF"
      ]
     },
     {
      "name" : "utf8_text",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Convert Node to utf8 string\n",
      "line" : 510,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiAyaZQe",
      "originalType" : "const nothrow @nogc extern (C) (string source_code)",
      "parameters" : [
       {
        "name" : "source_code",
        "deco" : "Aya"
       }
      ],
      "endline" : 516,
      "endchar" : 3
     },
     {
      "name" : "utf8_text",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 519,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiAhZAa",
      "originalType" : "const nothrow @nogc extern (C) (ubyte[] source)",
      "parameters" : [
       {
        "name" : "source",
        "deco" : "Ah"
       }
      ],
      "endline" : 522,
      "endchar" : 3
     },
     {
      "name" : "utf16_text",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Convert Node to utf16 string\n",
      "line" : 525,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiAtZAu",
      "originalType" : "const nothrow @nogc extern (C) (ushort[] source)",
      "parameters" : [
       {
        "name" : "source",
        "deco" : "At"
       }
      ],
      "endline" : 528,
      "endchar" : 3
     },
     {
      "name" : "walk",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Create a new [TreeCursor] starting from this node.\n",
      "line" : 531,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS11tree_cursor10TreeCursor",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 534,
      "endchar" : 3
     },
     {
      "name" : "hash",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Hash a node. This returns a unique string for this node.\n",
      "line" : 537,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiNeZAxa",
      "originalType" : "const @nogc @trusted extern (C) ()",
      "endline" : 542,
      "endchar" : 3
     },
     {
      "name" : "traverse",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Traverse this `Node` and all its descendants in a top-down left to right manner while\n    applying the visitor at each [Node].\n",
      "line" : 548,
      "char" : 8,
      "linkage" : "c",
      "deco" : "xUC12tree_visitor11TreeVisitorZv",
      "parameters" : [
       {
        "name" : "visitor",
        "deco" : "C12tree_visitor11TreeVisitor"
       }
      ],
      "endline" : 576,
      "endchar" : 3
     },
     {
      "name" : "traverse_nothrow",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Traverse this `Node` and all its descendants in a top-down left to right manner while\n    applying the visitor at each [Node].\n\n    NOTE: if you are sure that TreeVisitor is nothrow, you can use this method\n",
      "line" : 584,
      "char" : 8,
      "linkage" : "c",
      "deco" : "xUNbC12tree_visitor11TreeVisitorZv",
      "parameters" : [
       {
        "name" : "visitor",
        "deco" : "C12tree_visitor11TreeVisitor"
       }
      ],
      "endline" : 589,
      "endchar" : 3
     },
     {
      "name" : "edit",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Edit this node to keep it in-sync with source code that has been edited.\n\n      This function is only rarely needed. When you edit a syntax tree with the\n      [Tree::edit] method, all of the nodes that you retrieve from the tree\n      afterward will already reflect the edit. You only need to use [Node::edit]\n      when you have a specific [Node] instance that you want to keep and continue\n      to use after an edit.\n",
      "line" : 599,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNixPS4libc11TSInputEditZv",
      "originalType" : "nothrow @nogc extern (C) (const InputEdit* edit)",
      "parameters" : [
       {
        "name" : "edit",
        "deco" : "xPS4libc11TSInputEdit"
       }
      ],
      "endline" : 602,
      "endchar" : 3
     }
    ]
   },
   {
    "name" : "NodeChildren",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "  A range to iterate over the node children.\n\n    A [TreeCursor] is used to retrieve the children efficiently. Obtain\n    a [TreeCursor] by calling [Tree::walk] or [Node::walk]. To avoid unnecessary\n    allocations, you should reuse the same cursor for subsequent calls to\n    this method.\n\n    If you're walking the tree recursively, you may want to use the `TreeCursor`\n    APIs directly instead.\n",
    "line" : 615,
    "char" : 1,
    "members" : [
     {
      "name" : "cursor",
      "kind" : "variable",
      "protection" : "private",
      "line" : 617,
      "char" : 23,
      "linkage" : "c",
      "deco" : "PS11tree_cursor10TreeCursor",
      "offset" : 0
     },
     {
      "name" : "count",
      "kind" : "variable",
      "protection" : "private",
      "line" : 619,
      "char" : 22,
      "storageClass" : [
       "const"
      ],
      "linkage" : "c",
      "deco" : "xk",
      "originalType" : "uint",
      "offset" : 4
     },
     {
      "name" : "iChild",
      "kind" : "variable",
      "protection" : "private",
      "line" : 620,
      "char" : 16,
      "linkage" : "c",
      "deco" : "k",
      "init" : "0u",
      "offset" : 8
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : " create a NodeChildren for the given node and cursor\n",
      "line" : 623,
      "char" : 8,
      "linkage" : "c",
      "deco" : "UNbNcNiS4node4NodePS11tree_cursor10TreeCursorZSQBn12NodeChildren",
      "originalType" : "nothrow @nogc ref extern (C) (Node parent, TreeCursor* cursor)",
      "parameters" : [
       {
        "name" : "parent",
        "deco" : "S4node4Node"
       },
       {
        "name" : "cursor",
        "deco" : "PS11tree_cursor10TreeCursor"
       }
      ],
      "endline" : 630,
      "endchar" : 3
     },
     {
      "name" : "front",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the current child\n",
      "line" : 633,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS4node4Node",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 636,
      "endchar" : 3
     },
     {
      "name" : "popFront",
      "kind" : "function",
      "protection" : "public",
      "comment" : " go to the next child\n",
      "line" : 639,
      "char" : 8,
      "linkage" : "c",
      "deco" : "UNbNiZv",
      "endline" : 643,
      "endchar" : 3
     },
     {
      "name" : "empty",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Is it the end?\n",
      "line" : 646,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNaNbNiNfZb",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 649,
      "endchar" : 3
     }
    ]
   },
   {
    "name" : "NodeNamedChildren",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "  A range the iterates over the node named children.\n\n    See also [Node::children].\n",
    "line" : 656,
    "char" : 1,
    "members" : [
     {
      "name" : "cursor",
      "kind" : "variable",
      "protection" : "private",
      "line" : 658,
      "char" : 23,
      "linkage" : "c",
      "deco" : "PS11tree_cursor10TreeCursor",
      "offset" : 0
     },
     {
      "name" : "count",
      "kind" : "variable",
      "protection" : "private",
      "line" : 660,
      "char" : 22,
      "storageClass" : [
       "const"
      ],
      "linkage" : "c",
      "deco" : "xk",
      "originalType" : "uint",
      "offset" : 4
     },
     {
      "name" : "iChild",
      "kind" : "variable",
      "protection" : "private",
      "line" : 661,
      "char" : 16,
      "linkage" : "c",
      "deco" : "k",
      "init" : "0u",
      "offset" : 8
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : " create a NodeNamedChildren for the given node and cursor\n",
      "line" : 664,
      "char" : 8,
      "linkage" : "c",
      "deco" : "UNbNcNiS4node4NodePS11tree_cursor10TreeCursorZSQBn17NodeNamedChildren",
      "originalType" : "nothrow @nogc ref extern (C) (Node parent, TreeCursor* cursor)",
      "parameters" : [
       {
        "name" : "parent",
        "deco" : "S4node4Node"
       },
       {
        "name" : "cursor",
        "deco" : "PS11tree_cursor10TreeCursor"
       }
      ],
      "endline" : 671,
      "endchar" : 3
     },
     {
      "name" : "preFront",
      "kind" : "function",
      "protection" : "private",
      "comment" : " Finds the front node\n",
      "line" : 674,
      "char" : 16,
      "linkage" : "c",
      "deco" : "UNbNiZv",
      "endline" : 683,
      "endchar" : 3
     },
     {
      "name" : "front",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get the current child\n    NOTE Do not call this twice in a row without calling popFront and empty in between!\n",
      "line" : 689,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNiZS4node4Node",
      "originalType" : "nothrow @nogc extern (C) ()",
      "endline" : 693,
      "endchar" : 3
     },
     {
      "name" : "popFront",
      "kind" : "function",
      "protection" : "public",
      "comment" : " go to the next child\n",
      "line" : 696,
      "char" : 8,
      "linkage" : "c",
      "deco" : "UNbNiZv",
      "endline" : 700,
      "endchar" : 3
     },
     {
      "name" : "empty",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Is it the end?\n",
      "line" : 703,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNaNbNiNfZb",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 706,
      "endchar" : 3
     }
    ]
   },
   {
    "name" : "NodeChildrenByFieldID",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "  A range to iterate over the node children with a given field id.\n\n    See also [Node::children_by_field_name].\n",
    "line" : 713,
    "char" : 1,
    "members" : [
     {
      "name" : "cursor",
      "kind" : "variable",
      "protection" : "private",
      "line" : 715,
      "char" : 23,
      "linkage" : "c",
      "deco" : "PS11tree_cursor10TreeCursor",
      "offset" : 0
     },
     {
      "name" : "field_id",
      "kind" : "variable",
      "protection" : "private",
      "line" : 716,
      "char" : 18,
      "linkage" : "c",
      "deco" : "t",
      "offset" : 4
     },
     {
      "name" : "noMoreNextSibiling",
      "kind" : "variable",
      "protection" : "private",
      "line" : 718,
      "char" : 16,
      "linkage" : "c",
      "deco" : "b",
      "init" : "false",
      "offset" : 6
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : " create a NodeChildrenByFieldID for the given node, field_id, and cursor\n",
      "line" : 721,
      "char" : 8,
      "linkage" : "c",
      "deco" : "UNbNcNiS4node4NodetPS11tree_cursor10TreeCursorZSQBo21NodeChildrenByFieldID",
      "originalType" : "nothrow @nogc ref extern (C) (Node parent, ushort field_id, TreeCursor* cursor)",
      "parameters" : [
       {
        "name" : "parent",
        "deco" : "S4node4Node"
       },
       {
        "name" : "field_id",
        "deco" : "t"
       },
       {
        "name" : "cursor",
        "deco" : "PS11tree_cursor10TreeCursor"
       }
      ],
      "endline" : 728,
      "endchar" : 3
     },
     {
      "name" : "preFront",
      "kind" : "function",
      "protection" : "private",
      "comment" : " Finds the front node\n",
      "line" : 731,
      "char" : 16,
      "linkage" : "c",
      "deco" : "UNbNiZv",
      "endline" : 738,
      "endchar" : 3
     },
     {
      "name" : "front",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get the current child\n    NOTE Do not call this twice in a row without calling popFront and empty in between!\n",
      "line" : 744,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNiZS4node4Node",
      "originalType" : "nothrow @nogc extern (C) ()",
      "endline" : 748,
      "endchar" : 3
     },
     {
      "name" : "popFront",
      "kind" : "function",
      "protection" : "public",
      "comment" : " go to the next child\n",
      "line" : 751,
      "char" : 8,
      "linkage" : "c",
      "deco" : "UNbNiZv",
      "endline" : 759,
      "endchar" : 3
     },
     {
      "name" : "empty",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Is it the end?\n",
      "line" : 762,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNaNbNiNfZxb",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 765,
      "endchar" : 3
     }
    ]
   }
  ]
 },
 {
  "name" : "other",
  "kind" : "module",
  "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\other.d",
  "members" : [
   {
    "name" : "libc",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "TSPoint"
    ]
   },
   {
    "name" : "Point",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "  A position in a multi-line text document, in terms of rows and columns.\n\n  Rows and columns are zero-based.\n\n  NOTE this directly uses the C's TSPoint.\n",
    "line" : 14,
    "char" : 1,
    "deco" : "S4libc7TSPoint"
   },
   {
    "name" : "opEqualsPoints",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Check the equality of two points\n",
    "line" : 17,
    "char" : 6,
    "linkage" : "c",
    "deco" : "UNbNiNfxS4libc7TSPointxQpZb",
    "originalType" : "nothrow @nogc @safe extern (C) bool(const Point lhs, const Point rhs)",
    "parameters" : [
     {
      "name" : "lhs",
      "deco" : "xS4libc7TSPoint"
     },
     {
      "name" : "rhs",
      "deco" : "xS4libc7TSPoint"
     }
    ],
    "endline" : 20,
    "endchar" : 1
   },
   {
    "name" : "libc",
    "kind" : "import",
    "line" : 22,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "TSRange"
    ]
   },
   {
    "name" : "Range",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "  A range of positions in a multi-line text document, both in terms of bytes and of\n  rows and columns.\n\n  NOTE this directly uses the C's TSRange. This means that the order of the arguments\n  for the constructor of Range is different than what the Rust bindings use.\n",
    "line" : 31,
    "char" : 1,
    "deco" : "S4libc7TSRange"
   },
   {
    "name" : "opEqualsRanges",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Check the equality of two ranges\n",
    "line" : 34,
    "char" : 6,
    "linkage" : "c",
    "deco" : "UNbNiNfxS4libc7TSRangexQpZb",
    "originalType" : "nothrow @nogc @safe extern (C) bool(const Range lhs, const Range rhs)",
    "parameters" : [
     {
      "name" : "lhs",
      "deco" : "xS4libc7TSRange"
     },
     {
      "name" : "rhs",
      "deco" : "xS4libc7TSRange"
     }
    ],
    "endline" : 38,
    "endchar" : 1
   },
   {
    "name" : "libc",
    "kind" : "import",
    "line" : 40,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "TSInputEdit"
    ]
   },
   {
    "name" : "InputEdit",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "  A summary of a change to a text document.\n\n  NOTE this directly uses the C's TSInputEdit.\n",
    "line" : 46,
    "char" : 1,
    "deco" : "S4libc11TSInputEdit"
   }
  ]
 },
 {
  "name" : "parser",
  "kind" : "module",
  "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\parser.d",
  "members" : [
   {
    "name" : "language",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "tree",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "tree_visitor",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "tree_printer",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "libc",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "TSTree"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Nullable"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "fromStringz",
     "toStringz"
    ]
   },
   {
    "name" : "Parser",
    "kind" : "struct",
    "protection" : "public",
    "comment" : " A stateful object that this is used to produce a `Tree` based on some source code\n",
    "line" : 16,
    "char" : 1,
    "members" : [
     {
      "name" : "libc",
      "kind" : "import",
      "line" : 18,
      "char" : 10,
      "protection" : "private",
      "selective" : [
       "TSParser",
       "ts_parser_new",
       "ts_parser_delete",
       "ts_parser_language",
       "ts_parser_set_language",
       "ts_parser_logger",
       "TSLogger",
       "ts_parser_print_dot_graphs",
       "ts_parser_parse",
       "ts_parser_parse_string",
       "ts_parser_parse_string_encoding",
       "TSInput",
       "TSInputEncoding"
      ]
     },
     {
      "name" : "std.stdio",
      "kind" : "import",
      "line" : 22,
      "char" : 10,
      "protection" : "private",
      "selective" : [
       "File"
      ]
     },
     {
      "name" : "tsparser",
      "kind" : "variable",
      "protection" : "public",
      "comment" : " internal TSParser\n",
      "line" : 25,
      "char" : 13,
      "linkage" : "c",
      "deco" : "PS4libc8TSParser",
      "offset" : 0
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : " Create a new Parser for the given language.\n      NOTE: It assumes that the language is compatible (uses `set_language_nothrow`).\n      Params:\n        language = the language you want to create a parser for\n",
      "line" : 32,
      "char" : 3,
      "linkage" : "c",
      "deco" : "UNbNcNiIS8language8LanguageZS6parser6Parser",
      "originalType" : "nothrow @nogc ref extern (C) (in Language language)",
      "parameters" : [
       {
        "name" : "language",
        "deco" : "xS8language8Language",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 40,
      "endchar" : 3
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 42,
      "char" : 12,
      "storageClass" : [
       "@disable"
      ],
      "linkage" : "c",
      "deco" : "UNcZS6parser6Parser",
      "originalType" : "ref extern (C) ()"
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 45,
      "char" : 3,
      "deco" : "FNbNiZv",
      "endline" : 49,
      "endchar" : 3
     },
     {
      "name" : "set_language_nothrow",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Set the language that the parser should use for parsing.\n\n NOTE it assumes that the language is compatible. Returns a boolean indicating whether or not the language was successfully\n assigned.\n",
      "line" : 57,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNiIS8language8LanguageZb",
      "originalType" : "nothrow extern (C) (in Language language)",
      "parameters" : [
       {
        "name" : "language",
        "deco" : "xS8language8Language",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 60,
      "endchar" : 3
     },
     {
      "name" : "set_language",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Set the language that the parser should use for parsing.\n\n Returns a boolean indicating whether or not the language was successfully\n assigned. True means assignment succeeded. False means there was a version\n mismatch, the language was gen with an incompatible version of the\n Tree-sitter CLI. Check the language's version using `ts_language_version`\n and compare it to this library's `TREE_SITTER_LANGUAGE_VERSION` and\n `TREE_SITTER_MIN_COMPATIBLE_LANGUAGE_VERSION` constants.\n",
      "line" : 72,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UIS8language8LanguageZb",
      "originalType" : "extern (C) (in Language language)",
      "parameters" : [
       {
        "name" : "language",
        "deco" : "xS8language8Language",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 77,
      "endchar" : 3
     },
     {
      "name" : "enforce_compatible_language",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Throws an error if the version of the given language is not compatible\n",
      "line" : 80,
      "char" : 8,
      "linkage" : "c",
      "deco" : "xUS8language8LanguageZv",
      "parameters" : [
       {
        "name" : "language",
        "deco" : "S8language8Language"
       }
      ],
      "endline" : 93,
      "endchar" : 3
     },
     {
      "name" : "language",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the parser's current language.\n",
      "line" : 96,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS3std8typecons__T8NullableTS8language8LanguageZQBe",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 104,
      "endchar" : 3
     },
     {
      "name" : "logger",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the parser's current logger.\n",
      "line" : 107,
      "char" : 13,
      "linkage" : "c",
      "deco" : "xUNbNiZPS4libc8TSLogger",
      "endline" : 111,
      "endchar" : 3
     },
     {
      "name" : "print_dot_graphs",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Set the destination to which the parser should write debugging graphs\n    during parsing. The graphs are formatted in the DOT language. You may want\n    to pipe these graphs directly to a `dot(1)` process in order to generate\n    SVG output.\n",
      "line" : 122,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "US3std5stdio4FileZv",
      "originalType" : "extern (C) (File file)",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "S3std5stdio4File"
       }
      ],
      "endline" : 126,
      "endchar" : 3
     },
     {
      "name" : "stop_printing_dot_graphs",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Stop the parser from printing debugging graphs while parsing.\n",
      "line" : 129,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNiZv",
      "originalType" : "nothrow @nogc extern (C) ()",
      "endline" : 132,
      "endchar" : 3
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Use the parser to parse some source code and create a syntax tree.\n\n    If you are parsing this document for the first time, pass `NULL` for the\n    `old_tree` parameter. Otherwise, if you have already parsed an earlier\n    version of this document and the document has since been edited, pass the\n    previous syntax tree so that the unchanged parts of it can be reused.\n    This will save time and memory. For this to work correctly, you must have\n    already edited the old syntax tree using the `ts_tree_edit` function in a\n    way that exactly matches the source code changes.\n\n    The `TSInput` parameter lets you specify how to read the text. It has the\n    following three fields:\n    1. `read`: A function to retrieve a chunk of text at a given byte offset\n       and (row, column) position. The function should return a pointer to the\n       text and write its length to the `bytes_read` pointer. The parser does\n       not take ownership of this buffer; it just borrows it until it has\n       finished reading it. The function should write a zero value to the\n       `bytes_read` pointer to indicate the end of the document.\n    2. `payload`: An arbitrary pointer that will be passed to each invocation\n       of the `read` function.\n    3. `encoding`: An indication of how the text is encoded. Either\n       `TSInputEncodingUTF8` or `TSInputEncodingUTF16`.\n\n    This function returns a syntax tree on success, and `NULL` on failure. There\n    are three possible reasons for failure:\n    1. The parser does not have a language assigned. Check for this using the\n      `ts_parser_language` function.\n    2. Parsing was cancelled due to a timeout that was set by an earlier call to\n       the `ts_parser_set_timeout_micros` function. You can resume parsing from\n       where the parser left out by calling `ts_parser_parse` again with the\n       same arguments. Or you can start parsing from scratch by first calling\n       `ts_parser_reset`.\n    3. Parsing was cancelled using a cancellation flag that was set by an\n       earlier call to `ts_parser_set_cancellation_flag`. You can resume parsing\n       from where the parser left out by calling `ts_parser_parse` again with\n       the same arguments.\n",
      "line" : 172,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNiS4libc7TSInputxPSQq6TSTreeZPSQBcQn",
      "originalType" : "nothrow @nogc extern (C) (TSInput input, const TSTree* old_tree = Tree.create_empty())",
      "parameters" : [
       {
        "name" : "input",
        "deco" : "S4libc7TSInput"
       },
       {
        "name" : "old_tree",
        "deco" : "xPS4libc6TSTree",
        "default" : "create_empty()"
       }
      ],
      "endline" : 175,
      "endchar" : 3
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Use the parser to parse some source code stored in one contiguous buffer.\n    The first two parameters are the same as in the `ts_parser_parse` function\n    above. The second two parameters indicate the location of the buffer and its\n    length in bytes.\n",
      "line" : 183,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbxAyaxPS4libc6TSTreeZPSQpQm",
      "originalType" : "nothrow extern (C) (const string source_code, const TSTree* old_tree = Tree.create_empty())",
      "parameters" : [
       {
        "name" : "source_code",
        "deco" : "xAya",
        "storageClass" : [
         "scope"
        ]
       },
       {
        "name" : "old_tree",
        "deco" : "xPS4libc6TSTree",
        "default" : "create_empty()"
       }
      ],
      "endline" : 189,
      "endchar" : 3
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Use the parser to parse some source code stored in one contiguous buffer with\n    a given encoding. The first four parameters work the same as in the\n    `ts_parser_parse_string` method above. The final parameter indicates whether\n    the text is encoded as UTF8 or UTF16.\n",
      "line" : 197,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbxAyaxE4libc12_Anonymous_5xPSQw6TSTreeZPSQBiQn",
      "originalType" : "nothrow extern (C) (const string source_code, const TSInputEncoding encoding, const TSTree* old_tree = Tree.create_empty())",
      "parameters" : [
       {
        "name" : "source_code",
        "deco" : "xAya",
        "storageClass" : [
         "scope"
        ]
       },
       {
        "name" : "encoding",
        "deco" : "xE4libc12_Anonymous_5"
       },
       {
        "name" : "old_tree",
        "deco" : "xPS4libc6TSTree",
        "default" : "create_empty()"
       }
      ],
      "endline" : 205,
      "endchar" : 3
     },
     {
      "name" : "parse_utf8",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Parse the given source_code that is in utf8 encoding\n",
      "line" : 210,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbxAyaxPS4libc6TSTreeZPSQpQm",
      "originalType" : "nothrow extern (C) (const string source_code, const TSTree* old_tree = Tree.create_empty())",
      "parameters" : [
       {
        "name" : "source_code",
        "deco" : "xAya",
        "storageClass" : [
         "scope"
        ]
       },
       {
        "name" : "old_tree",
        "deco" : "xPS4libc6TSTree",
        "default" : "create_empty()"
       }
      ],
      "endline" : 213,
      "endchar" : 3
     },
     {
      "name" : "parse_utf16",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Parse the given source_code that is in utf16 encoding\n",
      "line" : 218,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNixAyuxPS4libc6TSTreeZPSQpQm",
      "originalType" : "nothrow @nogc extern (C) (const wstring source_code, const TSTree* old_tree = Tree.create_empty())",
      "parameters" : [
       {
        "name" : "source_code",
        "deco" : "xAyu"
       },
       {
        "name" : "old_tree",
        "deco" : "xPS4libc6TSTree",
        "default" : "create_empty()"
       }
      ],
      "endline" : 226,
      "endchar" : 3
     },
     {
      "name" : "parse_to_tree",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Parse the given source_code into a Tree\n",
      "line" : 231,
      "char" : 8,
      "linkage" : "c",
      "deco" : "UNbxAyaZS4tree4Tree",
      "originalType" : "nothrow extern (C) Tree(const string source)",
      "parameters" : [
       {
        "name" : "source",
        "deco" : "xAya"
       }
      ],
      "endline" : 234,
      "endchar" : 3
     },
     {
      "name" : "s_expression",
      "kind" : "function",
      "protection" : "public",
      "comment" : "        Get the S-expression of the given source code\n        Params:\n            source_code =     the given source code as a string\n        Returns: the parsed S-expression\n",
      "line" : 242,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbxAyaZAya",
      "originalType" : "nothrow extern (C) (const string source_code)",
      "parameters" : [
       {
        "name" : "source_code",
        "deco" : "xAya"
       }
      ],
      "endline" : 251,
      "endchar" : 3
     },
     {
      "name" : "traverse",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Traverse the [Tree] starting from its root [Node] applying a visitor at all nodes.\n",
      "line" : 256,
      "char" : 8,
      "linkage" : "c",
      "deco" : "UxAyaC12tree_visitor11TreeVisitorZv",
      "originalType" : "extern (C) void(const string source_code, TreeVisitor visitor)",
      "parameters" : [
       {
        "name" : "source_code",
        "deco" : "xAya"
       },
       {
        "name" : "visitor",
        "deco" : "C12tree_visitor11TreeVisitor"
       }
      ],
      "endline" : 264,
      "endchar" : 3
     },
     {
      "name" : "traverse_print",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Traverse the `Tree` starting from its root `Node` and print information about each\n",
      "line" : 269,
      "char" : 10,
      "linkage" : "c",
      "deco" : "UNexAyaZAya",
      "originalType" : "@trusted extern (C) string(const string source_code)",
      "parameters" : [
       {
        "name" : "source_code",
        "deco" : "xAya"
       }
      ],
      "endline" : 282,
      "endchar" : 3
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 16,
      "char" : 1,
      "deco" : "FNbNcNiNjS6parser6ParserZQq",
      "originalType" : "nothrow @nogc ref Parser(Parser p) return",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S6parser6Parser"
       }
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "query",
  "kind" : "module",
  "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\query.d",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 3,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 4,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "language",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "node",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "tree_visitor",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "other",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "libc",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "TSQuery",
     "TSQueryError",
     "TSQueryMatch",
     "TSQueryCursor",
     "TSQueryCapture",
     "TSQueryPredicateStep"
    ]
   },
   {
    "name" : "QueryCapture",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "A particular `Node` that has been captured with a particular name within a `Query`.\n",
    "line" : 15,
    "char" : 1,
    "members" : [
     {
      "name" : "node",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "The `Node` that was captured.\n",
      "line" : 18,
      "char" : 8,
      "deco" : "S4node4Node",
      "offset" : 0
     },
     {
      "name" : "index",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "the index\n",
      "line" : 20,
      "char" : 7,
      "deco" : "i",
      "offset" : 24
     },
     {
      "name" : "name",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "The name of the capture.\n",
      "line" : 22,
      "char" : 10,
      "deco" : "Aya",
      "offset" : 28
     }
    ]
   },
   {
    "name" : "QueryMatch",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "A match of a `Query` to a particular set of `Node`s.\n",
    "line" : 26,
    "char" : 1,
    "members" : [
     {
      "name" : "id",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "The id\n",
      "line" : 29,
      "char" : 8,
      "deco" : "k",
      "offset" : 0
     },
     {
      "name" : "pattern_index",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "the pattern index\n",
      "line" : 31,
      "char" : 8,
      "deco" : "k",
      "offset" : 4
     },
     {
      "name" : "captures",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "the captures array\n",
      "line" : 33,
      "char" : 18,
      "deco" : "AS5query12QueryCapture",
      "offset" : 8
     }
    ]
   },
   {
    "name" : "QueryIterator",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "A sequence of `QueryMatch`es associated with a given `QueryCursor`.\n",
    "line" : 37,
    "char" : 1,
    "members" : [
     {
      "name" : "libc",
      "kind" : "import",
      "line" : 39,
      "char" : 10,
      "protection" : "private",
      "selective" : [
       "ts_query_cursor_new",
       "ts_query_cursor_delete",
       "ts_query_cursor_exec",
       "ts_query_cursor_next_match",
       "ts_query_cursor_set_byte_range",
       "ts_query_cursor_set_point_range"
      ]
     },
     {
      "name" : "query",
      "kind" : "variable",
      "protection" : "private",
      "line" : 43,
      "char" : 18,
      "deco" : "PS5query5Query",
      "offset" : 0
     },
     {
      "name" : "node",
      "kind" : "variable",
      "protection" : "private",
      "line" : 44,
      "char" : 17,
      "deco" : "PS4node4Node",
      "offset" : 4
     },
     {
      "name" : "cursor",
      "kind" : "variable",
      "protection" : "private",
      "line" : 46,
      "char" : 26,
      "deco" : "PS4libc13TSQueryCursor",
      "offset" : 8
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : "Create a new `QueryIterator` for the given `Query` and `Node`.\n",
      "line" : 51,
      "char" : 3,
      "deco" : "FNcPS5query5QueryPS4node4NodeZSQBa13QueryIterator",
      "originalType" : "ref (Query* query, Node* node)",
      "parameters" : [
       {
        "name" : "query",
        "deco" : "PS5query5Query"
       },
       {
        "name" : "node",
        "deco" : "PS4node4Node"
       }
      ],
      "endline" : 57,
      "endchar" : 3
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : "Create a new `QueryIterator` for the given `Query` and `Node` and given byte range.\n",
      "line" : 60,
      "char" : 3,
      "deco" : "FNcPS5query5QueryPS4node4NodekkZSQBc13QueryIterator",
      "originalType" : "ref (Query* query, Node* node, uint min, uint max)",
      "parameters" : [
       {
        "name" : "query",
        "deco" : "PS5query5Query"
       },
       {
        "name" : "node",
        "deco" : "PS4node4Node"
       },
       {
        "name" : "min",
        "deco" : "k"
       },
       {
        "name" : "max",
        "deco" : "k"
       }
      ],
      "endline" : 64,
      "endchar" : 3
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : "Create a new `QueryIterator` for the given `Query` and `Node` and given point range.\n",
      "line" : 67,
      "char" : 3,
      "deco" : "FNcPS5query5QueryPS4node4NodeS4libc7TSPointQoZSQBq13QueryIterator",
      "originalType" : "ref (Query* query, Node* node, Point min, Point max)",
      "parameters" : [
       {
        "name" : "query",
        "deco" : "PS5query5Query"
       },
       {
        "name" : "node",
        "deco" : "PS4node4Node"
       },
       {
        "name" : "min",
        "deco" : "S4libc7TSPoint"
       },
       {
        "name" : "max",
        "deco" : "S4libc7TSPoint"
       }
      ],
      "endline" : 71,
      "endchar" : 3
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 73,
      "char" : 3,
      "deco" : "FZv",
      "endline" : 76,
      "endchar" : 3
     },
     {
      "name" : "set_byte_range",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Adjusts the range in which the query will apply.\n `min` and `max` are byte offsets.\n",
      "line" : 82,
      "char" : 8,
      "deco" : "FkkZv",
      "parameters" : [
       {
        "name" : "min",
        "deco" : "k"
       },
       {
        "name" : "max",
        "deco" : "k"
       }
      ],
      "endline" : 85,
      "endchar" : 3
     },
     {
      "name" : "set_point_range",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Adjusts the range in which the query will apply.\n `min` and `max` are Point offsets.\n",
      "line" : 91,
      "char" : 8,
      "deco" : "FS4libc7TSPointQoZv",
      "originalType" : "void(Point min, Point max)",
      "parameters" : [
       {
        "name" : "min",
        "deco" : "S4libc7TSPoint"
       },
       {
        "name" : "max",
        "deco" : "S4libc7TSPoint"
       }
      ],
      "endline" : 94,
      "endchar" : 3
     },
     {
      "name" : "opApply",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Returns the next `QueryMatch` in the sequence.\n",
      "line" : 97,
      "char" : 7,
      "deco" : "FMDFS5query10QueryMatchZiZi",
      "parameters" : [
       {
        "name" : "dg",
        "deco" : "DFS5query10QueryMatchZi",
        "storageClass" : [
         "scope"
        ]
       }
      ],
      "endline" : 111,
      "endchar" : 3
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 37,
      "char" : 1,
      "deco" : "FNcNjS5query13QueryIteratorZQx",
      "originalType" : "ref QueryIterator(QueryIterator p) return",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S5query13QueryIterator"
       }
      ]
     }
    ]
   },
   {
    "name" : "QueryException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "An error that occurred when trying to create a `Query`.\n",
    "line" : 115,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "error",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "the internal TSQueryError error\n",
      "line" : 118,
      "char" : 16,
      "deco" : "E4libc12_Anonymous_0",
      "originalType" : "TSQueryError",
      "offset" : 40
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : "Create a new `QueryException` with the given `TSQueryError`.\n",
      "line" : 120,
      "char" : 3,
      "deco" : "FE4libc12_Anonymous_0ZC5query14QueryException",
      "originalType" : "(TSQueryError error)",
      "parameters" : [
       {
        "name" : "error",
        "deco" : "E4libc12_Anonymous_0"
       }
      ],
      "endline" : 124,
      "endchar" : 3
     }
    ]
   },
   {
    "name" : "Query",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "A query to retrieve information from the syntax tree.\n",
    "line" : 128,
    "char" : 1,
    "members" : [
     {
      "name" : "libc",
      "kind" : "import",
      "line" : 130,
      "char" : 10,
      "protection" : "private",
      "selective" : [
       "ts_query_new",
       "ts_query_delete",
       "ts_query_pattern_count",
       "ts_query_capture_count",
       "ts_query_start_byte_for_pattern",
       "ts_query_predicates_for_pattern",
       "ts_query_is_pattern_guaranteed_at_step",
       "ts_query_capture_name_for_id",
       "ts_query_disable_capture",
       "ts_query_disable_pattern",
       "ts_query_string_count",
       "ts_query_string_value_for_id"
      ]
     },
     {
      "name" : "tsquery",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "The underlying `TSQuery`\n",
      "line" : 139,
      "char" : 12,
      "deco" : "PS4libc7TSQuery",
      "offset" : 0
     },
     {
      "name" : "language",
      "kind" : "variable",
      "protection" : "private",
      "comment" : "The language of the query\n",
      "line" : 141,
      "char" : 20,
      "deco" : "S8language8Language",
      "offset" : 4
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : "Create a new query from a string containing one or more S-expression\npatterns.\n\nThe query is associated with a particular language, and can only be run\non syntax nodes parsed with that language. References to Queries can be\nshared between multiple threads.\n",
      "line" : 151,
      "char" : 3,
      "deco" : "FNcS8language8LanguageAyaZS5query5Query",
      "originalType" : "ref (Language language, string queryString)",
      "parameters" : [
       {
        "name" : "language",
        "deco" : "S8language8Language"
       },
       {
        "name" : "queryString",
        "deco" : "Aya"
       }
      ],
      "endline" : 165,
      "endchar" : 3
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 167,
      "char" : 3,
      "deco" : "FZv",
      "endline" : 170,
      "endchar" : 3
     },
     {
      "name" : "exec",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Execute a query over an entire node.\n\n The caller may iterate over the result to receive a series of\n `QueryMatch` results.\n",
      "line" : 178,
      "char" : 17,
      "deco" : "FS4node4NodeZS5query13QueryIterator",
      "parameters" : [
       {
        "name" : "node",
        "deco" : "S4node4Node"
       }
      ],
      "endline" : 181,
      "endchar" : 3
     },
     {
      "name" : "exec",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Execute a query between given start and end byte offsets.\n\n The caller may iterate over the result to receive a series of\n `QueryMatch` results.\n",
      "line" : 189,
      "char" : 17,
      "deco" : "FS4node4NodekkZS5query13QueryIterator",
      "parameters" : [
       {
        "name" : "node",
        "deco" : "S4node4Node"
       },
       {
        "name" : "min",
        "deco" : "k"
       },
       {
        "name" : "max",
        "deco" : "k"
       }
      ],
      "endline" : 192,
      "endchar" : 3
     },
     {
      "name" : "exec",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Execute a query between given start and end `Points`.\n\n The caller may iterate over the result to receive a series of\n `QueryMatch` results.\n",
      "line" : 200,
      "char" : 17,
      "deco" : "FS4node4NodeS4libc7TSPointQoZS5query13QueryIterator",
      "originalType" : "QueryIterator(Node node, Point min, Point max)",
      "parameters" : [
       {
        "name" : "node",
        "deco" : "S4node4Node"
       },
       {
        "name" : "min",
        "deco" : "S4libc7TSPoint"
       },
       {
        "name" : "max",
        "deco" : "S4libc7TSPoint"
       }
      ],
      "endline" : 203,
      "endchar" : 3
     },
     {
      "name" : "pattern_count",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the number of patterns in the query.\n",
      "line" : 208,
      "char" : 7,
      "deco" : "FNbNiZi",
      "endline" : 211,
      "endchar" : 3
     },
     {
      "name" : "capture_count",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the number of captures in the query.\n",
      "line" : 216,
      "char" : 7,
      "deco" : "FNbNiZi",
      "endline" : 219,
      "endchar" : 3
     },
     {
      "name" : "string_count",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the number of string literals in the query.\n",
      "line" : 224,
      "char" : 7,
      "deco" : "FNbNiZi",
      "endline" : 227,
      "endchar" : 3
     },
     {
      "name" : "start_byte_for_pattern",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the byte offset where the given pattern starts in the query's source.\n\n This can be useful when combining queries by concatenating their source\n code strings.\n",
      "line" : 235,
      "char" : 7,
      "deco" : "FNbNikZi",
      "parameters" : [
       {
        "name" : "patternId",
        "deco" : "k"
       }
      ],
      "endline" : 238,
      "endchar" : 3
     },
     {
      "name" : "predicates_for_pattern",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get all of the predicates for the given pattern in the query.\n\n The predicates are represented as a single array of steps. There are three\n types of steps in this array, which correspond to the three legal values for\n the `type` field:\n - `TSQueryPredicateStepTypeCapture` - Steps with this type represent names\n    of captures. Their `value_id` can be used with the\n   `ts_query_capture_name_for_id` function to obtain the name of the capture.\n - `TSQueryPredicateStepTypeString` - Steps with this type represent literal\n    strings. Their `value_id` can be used with the\n    `ts_query_string_value_for_id` function to obtain their string value.\n - `TSQueryPredicateStepTypeDone` - Steps with this type are *sentinels*\n    that represent the end of an individual predicate. If a pattern has two\n    predicates, then there will be two steps with this `type` in the array.\n",
      "line" : 256,
      "char" : 33,
      "deco" : "FNbNikZAxS4libc20TSQueryPredicateStep",
      "parameters" : [
       {
        "name" : "patternId",
        "deco" : "k"
       }
      ],
      "endline" : 261,
      "endchar" : 3
     },
     {
      "name" : "is_pattern_guaranteed_at_step",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Check if a given step in a query is 'definite'.\n\n A query step is 'definite' if its parent pattern will be guaranteed to match\n successfully once it reaches the step.\n",
      "line" : 269,
      "char" : 8,
      "deco" : "FNbNikZb",
      "parameters" : [
       {
        "name" : "byteOffset",
        "deco" : "k"
       }
      ],
      "endline" : 272,
      "endchar" : 3
     },
     {
      "name" : "step_is_definite",
      "kind" : "function",
      "protection" : "public",
      "comment" : " @deprecated. Use `is_pattern_guaranteed_at_step` instead.\n",
      "line" : 277,
      "char" : 8,
      "deco" : "FNbNikZb",
      "parameters" : [
       {
        "name" : "byteOffset",
        "deco" : "k"
       }
      ],
      "endline" : 280,
      "endchar" : 3
     },
     {
      "name" : "capture_name_for_id",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the name of one of the query's captures.\n\n Each capture is associated with a numeric id based on the order that it\n appeared in the query's source.\n",
      "line" : 288,
      "char" : 10,
      "deco" : "FNbkZAya",
      "parameters" : [
       {
        "name" : "captureId",
        "deco" : "k"
       }
      ],
      "endline" : 293,
      "endchar" : 3
     },
     {
      "name" : "capture_name",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the name of one of the query's captures, given a TSQueryCapture.\n",
      "line" : 298,
      "char" : 10,
      "deco" : "FNbS4libc14TSQueryCaptureZAya",
      "parameters" : [
       {
        "name" : "capture",
        "deco" : "S4libc14TSQueryCapture"
       }
      ],
      "endline" : 301,
      "endchar" : 3
     },
     {
      "name" : "query_string_value_for_id",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the name of one of the query's string literals.\n\n Each string is associated with a numeric id based on the order that it\n appeared in the query's source.\n",
      "line" : 308,
      "char" : 10,
      "deco" : "FNbkZAya",
      "parameters" : [
       {
        "name" : "id",
        "deco" : "k"
       }
      ],
      "endline" : 313,
      "endchar" : 3
     },
     {
      "name" : "disable_capture",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Disable a certain capture within a query.\n\n This prevents the capture from being returned in matches, and also avoids\n any resource usage associated with recording the capture. Currently, there\n is no way to undo this.\n",
      "line" : 322,
      "char" : 8,
      "deco" : "FAyaZv",
      "parameters" : [
       {
        "name" : "captureName",
        "deco" : "Aya"
       }
      ],
      "endline" : 325,
      "endchar" : 3
     },
     {
      "name" : "disable_pattern",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Disable a certain pattern within a query.\n\n This prevents the pattern from matching and removes most of the overhead\n associated with the pattern. Currently, there is no way to undo this.\n",
      "line" : 333,
      "char" : 8,
      "deco" : "FNbNikZv",
      "parameters" : [
       {
        "name" : "patternId",
        "deco" : "k"
       }
      ],
      "endline" : 336,
      "endchar" : 3
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     }
    ]
   }
  ]
 },
 {
  "name" : "tree",
  "kind" : "module",
  "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\tree.d",
  "members" : [
   {
    "name" : "language",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "node",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "tree_visitor",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "other",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "libc",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "TSTree"
    ]
   },
   {
    "name" : "Tree",
    "kind" : "struct",
    "protection" : "public",
    "comment" : " A tree that represents the syntactic structure of a source code file.\n",
    "line" : 12,
    "char" : 1,
    "members" : [
     {
      "name" : "libc",
      "kind" : "import",
      "line" : 14,
      "char" : 10,
      "protection" : "private",
      "selective" : [
       "ts_tree_delete",
       "ts_tree_root_node",
       "ts_tree_language",
       "ts_tree_edit",
       "ts_tree_get_changed_ranges",
       "ts_tree_copy",
       "ts_tree_print_dot_graph"
      ]
     },
     {
      "name" : "std.stdio",
      "kind" : "import",
      "line" : 17,
      "char" : 10,
      "protection" : "private",
      "selective" : [
       "File"
      ]
     },
     {
      "name" : "tstree",
      "kind" : "variable",
      "protection" : "public",
      "comment" : " internal TsTree\n",
      "line" : 20,
      "char" : 11,
      "linkage" : "c",
      "deco" : "PS4libc6TSTree",
      "offset" : 0
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : " Create a new Tree\n",
      "line" : 23,
      "char" : 3,
      "linkage" : "c",
      "deco" : "UNbNcNiPS4libc6TSTreeZS4tree4Tree",
      "originalType" : "nothrow @nogc ref extern (C) (TSTree* tstree)",
      "parameters" : [
       {
        "name" : "tstree",
        "deco" : "PS4libc6TSTree"
       }
      ],
      "endline" : 27,
      "endchar" : 3
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 29,
      "char" : 3,
      "deco" : "FNbNiZv",
      "endline" : 32,
      "endchar" : 3
     },
     {
      "name" : "this",
      "kind" : "copy constructor",
      "protection" : "public",
      "comment" : " Create a shallow copy of the syntax tree. This is very fast.\n\n You need to copy a syntax tree in order to use it on more than one thread at\n a time, as syntax trees are not thread safe.\n",
      "line" : 40,
      "char" : 3,
      "linkage" : "c",
      "deco" : "UNbNcNiMNkKS4tree4TreeZQm",
      "originalType" : "nothrow @nogc ref extern (C) (return ref scope Tree otherTree)",
      "parameters" : [
       {
        "name" : "otherTree",
        "deco" : "S4tree4Tree",
        "storageClass" : [
         "scope",
         "ref",
         "return"
        ]
       }
      ],
      "endline" : 43,
      "endchar" : 3
     },
     {
      "name" : "this",
      "kind" : "copy constructor",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 46,
      "char" : 3,
      "linkage" : "c",
      "deco" : "NgUNbNcNiMNkKNgS4tree4TreeZNgQo",
      "originalType" : "inout nothrow @nogc ref extern (C) (return ref scope inout Tree otherTree)",
      "parameters" : [
       {
        "name" : "otherTree",
        "deco" : "NgS4tree4Tree",
        "storageClass" : [
         "scope",
         "ref",
         "return"
        ]
       }
      ],
      "endline" : 49,
      "endchar" : 3
     },
     {
      "name" : "create_empty",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Create an empty Tree\n",
      "line" : 54,
      "char" : 15,
      "storageClass" : [
       "auto",
       "static"
      ],
      "linkage" : "c",
      "deco" : "UNaNbNiNfZPxS4libc6TSTree",
      "originalType" : "nothrow @nogc extern (C) ()",
      "endline" : 57,
      "endchar" : 3
     },
     {
      "name" : "root_node",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Get the root node of the syntax tree.\n",
      "line" : 60,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS4node4Node",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 63,
      "endchar" : 3
     },
     {
      "name" : "language",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Get the language that was used to parse the syntax tree.\n",
      "line" : 66,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS8language8Language",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 69,
      "endchar" : 3
     },
     {
      "name" : "edit",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Edit the syntax tree to keep it in sync with source code that has been\n      edited.\n\n      You must describe the edit both in terms of byte offsets and in terms of\n      row/column coordinates.\n",
      "line" : 77,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNixPS4libc11TSInputEditZv",
      "originalType" : "nothrow @nogc extern (C) (const InputEdit* edit)",
      "parameters" : [
       {
        "name" : "edit",
        "deco" : "xPS4libc11TSInputEdit"
       }
      ],
      "endline" : 80,
      "endchar" : 3
     },
     {
      "name" : "walk",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Create a new [TreeCursor] starting from the root of the tree.\n",
      "line" : 83,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS11tree_cursor10TreeCursor",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 86,
      "endchar" : 3
     },
     {
      "name" : "traverse",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Traverse the [Tree] starting from its root [Node] applying a visitor at all nodes.\n",
      "line" : 91,
      "char" : 8,
      "linkage" : "c",
      "deco" : "xUC12tree_visitor11TreeVisitorZv",
      "parameters" : [
       {
        "name" : "visitor",
        "deco" : "C12tree_visitor11TreeVisitor"
       }
      ],
      "endline" : 94,
      "endchar" : 3
     },
     {
      "name" : "traverse_nothrow",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Traverse the [Tree] starting from its root [Node] applying a visitor at all nodes.\n\n    NOTE: if you are sure that TreeVisitor is nothrow, you can use this method\n",
      "line" : 101,
      "char" : 8,
      "linkage" : "c",
      "deco" : "xUC12tree_visitor11TreeVisitorZv",
      "parameters" : [
       {
        "name" : "visitor",
        "deco" : "C12tree_visitor11TreeVisitor"
       }
      ],
      "endline" : 104,
      "endchar" : 3
     },
     {
      "name" : "changed_ranges",
      "kind" : "function",
      "protection" : "public",
      "comment" : "  Compare this old edited syntax tree to a new syntax tree representing the same\n      document, returning a sequence of ranges whose syntactic structure has changed.\n\n      For this to work correctly, this syntax tree must have been edited such that its\n      ranges match up to the new tree. Generally, youl want to call this method right\n      after calling one of the [Parser::parse] functions. Call it on the old tree that\n      was passed to parse, and pass the new tree that was returned from `parse`.\n",
      "line" : 114,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbS4tree4TreeZAS4libc7TSRange",
      "originalType" : "const nothrow extern (C) (Tree other)",
      "parameters" : [
       {
        "name" : "other",
        "deco" : "S4tree4Tree"
       }
      ],
      "endline" : 127,
      "endchar" : 3
     },
     {
      "name" : "print_dot_graph",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Write a DOT graph describing the syntax tree to the given file.\n",
      "line" : 132,
      "char" : 8,
      "linkage" : "c",
      "deco" : "xUS3std5stdio4FileZv",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "S3std5stdio4File"
       }
      ],
      "endline" : 135,
      "endchar" : 3
     },
     {
      "name" : "dot_graph",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get a DOT graph describing the syntax tree as a string\n",
      "line" : 140,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUZAya",
      "originalType" : "const extern (C) ()",
      "endline" : 151,
      "endchar" : 3
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 12,
      "char" : 1,
      "deco" : "FNbNcNiNjS4tree4TreeZQm",
      "originalType" : "nothrow @nogc ref Tree(Tree p) return",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S4tree4Tree"
       }
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "tree_cursor",
  "kind" : "module",
  "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\tree_cursor.d",
  "members" : [
   {
    "name" : "node",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enforce"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "fromStringz"
    ]
   },
   {
    "name" : "TreeCursor",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "A stateful object for walking a syntax `Tree` efficiently.\n",
    "line" : 11,
    "char" : 1,
    "members" : [
     {
      "name" : "libc",
      "kind" : "import",
      "line" : 13,
      "char" : 10,
      "protection" : "private",
      "selective" : [
       "TSTreeCursor",
       "ts_tree_cursor_copy",
       "ts_tree_cursor_current_node",
       "ts_tree_cursor_current_field_id",
       "ts_tree_cursor_current_field_name",
       "ts_tree_cursor_goto_first_child",
       "ts_tree_cursor_goto_parent",
       "ts_tree_cursor_goto_next_sibling",
       "ts_tree_cursor_goto_first_child_for_byte",
       "ts_tree_cursor_reset",
       "ts_tree_cursor_delete"
      ]
     },
     {
      "name" : "tstreecursor",
      "kind" : "variable",
      "protection" : "public",
      "comment" : " internal `TSTreeCursor`\n",
      "line" : 21,
      "char" : 16,
      "linkage" : "c",
      "deco" : "S4libc12TSTreeCursor",
      "offset" : 0
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : " Create a new tree cursor\n",
      "line" : 24,
      "char" : 3,
      "linkage" : "c",
      "deco" : "UNbNcNiS4libc12TSTreeCursorZS11tree_cursor10TreeCursor",
      "originalType" : "nothrow @nogc ref extern (C) (TSTreeCursor tstreecursor)",
      "parameters" : [
       {
        "name" : "tstreecursor",
        "deco" : "S4libc12TSTreeCursor"
       }
      ],
      "endline" : 27,
      "endchar" : 3
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 29,
      "char" : 3,
      "deco" : "FNbNiZv",
      "endline" : 32,
      "endchar" : 3
     },
     {
      "name" : "this",
      "kind" : "copy constructor",
      "protection" : "public",
      "comment" : " Copy a tree cursor\n",
      "line" : 35,
      "char" : 3,
      "linkage" : "c",
      "deco" : "UNbNcNiMNkKS11tree_cursor10TreeCursorZQBb",
      "originalType" : "nothrow @nogc ref extern (C) (return ref scope TreeCursor otherTreeCursor)",
      "parameters" : [
       {
        "name" : "otherTreeCursor",
        "deco" : "S11tree_cursor10TreeCursor",
        "storageClass" : [
         "scope",
         "ref",
         "return"
        ]
       }
      ],
      "endline" : 38,
      "endchar" : 3
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : " Copy a tree cursor\n",
      "line" : 41,
      "char" : 3,
      "linkage" : "c",
      "deco" : "UNbNcNiPS11tree_cursor10TreeCursorZQBb",
      "originalType" : "nothrow @nogc ref extern (C) (TreeCursor* otherTreeCursor)",
      "parameters" : [
       {
        "name" : "otherTreeCursor",
        "deco" : "PS11tree_cursor10TreeCursor"
       }
      ],
      "endline" : 44,
      "endchar" : 3
     },
     {
      "name" : "node",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the tree cursor's current [Node].\n",
      "line" : 49,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZS4node4Node",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 52,
      "endchar" : 3
     },
     {
      "name" : "field_id",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Get the numerical field id of this tree cursor's current node.\n\n    See also [field_name](TreeCursor::field_name).\n",
      "line" : 59,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZt",
      "originalType" : "const @nogc extern (C) ()",
      "endline" : 64,
      "endchar" : 3
     },
     {
      "name" : "field_name",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Get the field name of this tree cursor's current node.\n",
      "line" : 67,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "xUNbNiZAxa",
      "originalType" : "const nothrow @nogc extern (C) ()",
      "endline" : 70,
      "endchar" : 3
     },
     {
      "name" : "goto_first_child",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Move this cursor to the first child of its current node.\n\n    This returns `true` if the cursor successfully moved, and returns `false`\n    if there were no children.\n",
      "line" : 78,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNiZb",
      "originalType" : "nothrow @nogc extern (C) ()",
      "endline" : 81,
      "endchar" : 3
     },
     {
      "name" : "goto_parent",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Move this cursor to the parent of its current node.\n\n    This returns `true` if the cursor successfully moved, and returns `false`\n    if there was no parent node (the cursor was already on the root node).\n",
      "line" : 89,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNiZb",
      "originalType" : "nothrow @nogc extern (C) ()",
      "endline" : 92,
      "endchar" : 3
     },
     {
      "name" : "goto_next_sibling",
      "kind" : "function",
      "protection" : "public",
      "comment" : "     Move this cursor to the next sibling of its current node.\n\n     This returns `true` if the cursor successfully moved, and returns `false`\n     if there was no next sibling node.\n",
      "line" : 100,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNiZb",
      "originalType" : "nothrow @nogc extern (C) ()",
      "endline" : 103,
      "endchar" : 3
     },
     {
      "name" : "goto_first_child_for_byte",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    Move this cursor to the first child of its current node that extends beyond\n    the given byte offset.\n\n    This returns the index of the child node if one was found, and returns `None`\n    if no such child was found.\n",
      "line" : 112,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UkZl",
      "originalType" : "extern (C) (size_t index)",
      "parameters" : [
       {
        "name" : "index",
        "deco" : "k"
       }
      ],
      "endline" : 117,
      "endchar" : 3
     },
     {
      "name" : "reset",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Re-initialize this tree cursor to start at a different node.\n",
      "line" : 120,
      "char" : 8,
      "storageClass" : [
       "auto"
      ],
      "linkage" : "c",
      "deco" : "UNbNiS4node4NodeZv",
      "originalType" : "nothrow @nogc extern (C) (Node node)",
      "parameters" : [
       {
        "name" : "node",
        "deco" : "S4node4Node"
       }
      ],
      "endline" : 123,
      "endchar" : 3
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 11,
      "char" : 1,
      "deco" : "FNbNcNiNjS11tree_cursor10TreeCursorZQBb",
      "originalType" : "nothrow @nogc ref TreeCursor(TreeCursor p) return",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S11tree_cursor10TreeCursor"
       }
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "tree_printer",
  "kind" : "module",
  "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\tree_printer.d",
  "members" : [
   {
    "name" : "tree_visitor",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "tree_cursor",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "bc.string",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "String",
     "nogcFormat"
    ]
   },
   {
    "name" : "TreePrinter",
    "kind" : "class",
    "protection" : "public",
    "comment" : " visit all the nodes and get information about each\n",
    "line" : 11,
    "char" : 7,
    "interfaces" : [
     "tree_visitor.TreeVisitor"
    ],
    "members" : [
     {
      "name" : "source_code",
      "kind" : "variable",
      "protection" : "private",
      "line" : 13,
      "char" : 24,
      "storageClass" : [
       "const"
      ],
      "linkage" : "c",
      "deco" : "xAya",
      "originalType" : "string",
      "offset" : 12
     },
     {
      "name" : "tree_string",
      "kind" : "variable",
      "protection" : "public",
      "comment" : " the information about the tree as a string\n",
      "line" : 16,
      "char" : 10,
      "linkage" : "c",
      "deco" : "S2bc6stringQh__T10StringImplTaVEQBfQBfQBi2RCi0VEQBvQBvQBy4Zeroi0ZQBx",
      "originalType" : "String",
      "init" : "StringImpl(0u, ['\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff', '\\xff'], null, false)",
      "offset" : 20
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : " create a TreePrinter using the source code\n      Params:\n        source_code =     the given source code as a string\n",
      "line" : 22,
      "char" : 3,
      "linkage" : "c",
      "deco" : "UNbNixAyaZC12tree_printer11TreePrinter",
      "originalType" : "nothrow @nogc extern (C) (const string source_code)",
      "parameters" : [
       {
        "name" : "source_code",
        "deco" : "xAya"
       }
      ],
      "endline" : 25,
      "endchar" : 3
     },
     {
      "name" : "enter_node",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    A function that gets the information about a node\n",
      "line" : 30,
      "char" : 8,
      "linkage" : "c",
      "deco" : "UNePS11tree_cursor10TreeCursorZb",
      "parameters" : [
       {
        "name" : "cursor",
        "deco" : "PS11tree_cursor10TreeCursor"
       }
      ],
      "endline" : 39,
      "endchar" : 3,
      "overrides" : [
       "tree_visitor.TreeVisitor.enter_node"
      ]
     },
     {
      "name" : "leave_node",
      "kind" : "function",
      "protection" : "public",
      "comment" : " A function that is called after all the children nodes are visited\n",
      "line" : 42,
      "char" : 8,
      "linkage" : "c",
      "deco" : "xUNbNiPS11tree_cursor10TreeCursorZv",
      "parameters" : [
       {
        "name" : "cursor",
        "deco" : "PS11tree_cursor10TreeCursor"
       }
      ],
      "endline" : 43,
      "endchar" : 24,
      "overrides" : [
       "tree_visitor.TreeVisitor.leave_node"
      ]
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 11,
      "char" : 7,
      "deco" : "FNaNbNiNeZv"
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     }
    ]
   }
  ]
 },
 {
  "name" : "tree_visitor",
  "kind" : "module",
  "file" : "C:\\Users\\aminy\\Github\\GitHub\\D\\d-tree-sitter\\d-tree-sitter\\src\\d_tree_sitter\\tree_visitor.d",
  "members" : [
   {
    "name" : "tree_cursor",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "TreeVisitor",
    "kind" : "interface",
    "protection" : "public",
    "comment" : " An interface that describes the minimum functions that a visitor requires\n",
    "line" : 8,
    "char" : 1,
    "members" : [
     {
      "name" : "enter_node",
      "kind" : "function",
      "protection" : "public",
      "comment" : "    A function that is called before the children of a node are visited\n    If this function returns `false` the visiting will of the children will be skipped.\n\n    NOTE: If the `cursor` is modified (e.g. by calling `cursor.children(&cursor)`),\n    the visiting is affected. If not desired, copy the cursor using `TreeCursor(cursor)` before modifying it.\n",
      "line" : 17,
      "char" : 8,
      "storageClass" : [
       "abstract"
      ],
      "linkage" : "c",
      "deco" : "UPS11tree_cursor10TreeCursorZb",
      "parameters" : [
       {
        "name" : "cursor",
        "deco" : "PS11tree_cursor10TreeCursor"
       }
      ]
     },
     {
      "name" : "leave_node",
      "kind" : "function",
      "protection" : "public",
      "comment" : " A function that is called after all the children nodes are visited\n",
      "line" : 20,
      "char" : 8,
      "storageClass" : [
       "abstract"
      ],
      "linkage" : "c",
      "deco" : "UPS11tree_cursor10TreeCursorZv",
      "parameters" : [
       {
        "name" : "cursor",
        "deco" : "PS11tree_cursor10TreeCursor"
       }
      ]
     }
    ]
   }
  ]
 }
]
